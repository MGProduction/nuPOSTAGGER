// ************************************************************
//
//                         nuPOSTAGGER
//                             by
//                        Marco Giorgini 
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// ************************************************************
//
//                         Description
//
//  A very minimal single .h file (English) PosTagger with no 
//  external data to load, less than 10KB of static memory used 
//  as engine core data and a single call for parsing / postagging 
//  of (ANSI) english text
//
//  functions to handle dynamic token array are also provided
//
//  Author:       Marco Giorgini, marco.giorgini@gmail.com
//  Date:         August 2021
//  File:         nuPOSTAGGER.h
//
// ************************************************************
//
//                           Usage
//
//   use #define NUPOSTAG_IMPLEMENT when you include this .h
//   in your main source file
//
//                     Sample calling code
//
//  #define NUPOSTAG_IMPLEMENT
//  #include "nuPOSTAGGER.h"
//
//  nuTokenbag tokens;
//  nuTokenbag_new(&tokens);
//
//  while( -- program need postagging)
//       {
//        char line[MAX_SIZE];
//        -- get text input and put in line
//
//        nuTokenbag_reset(&tokens);
//
//        nuPosTag(line,&tokens,nu_doparse);
//
//        -- use szPos for each of tokens.nTokens tokens in 
//           tokens.Token array for your own need
//
//       }
//
//  nuTokenbag_delete(&tokens);
//
// ************************************************************
//
//                        Disclaimers 
//
//   - not a single line of this source code is anyhow related to
//     the author's daily work - nor this source code reflects in 
//     any way that company technology, or source libraries
//   - quality of this PosTagger is "poor" (around 91%). 
//     It's meant to be used where size (and within certain limits,
//     speed) are a more important factor
//
// ************************************************************

#if !defined(NUPOSTAG_ONCE)

#define NUPOSTAG_ONCE

#define NUPOSTAG_PROPAGATEPROB(a,b) (a*b)

// static configuration
#define NUPOSTAG_NOCTYPEDEPENDENCIES
#define NUPOSTAG_USEBIN

#define MAXPOSLEN 8
#define MAXPATLEN 8
#define MAXLEXLEN 64

#define NUPOSTAG_TOPPERC 100

#define nuTAGUNK 255

#if defined(NUPOSTAG_8BITCODE)
typedef unsigned int   nuDWord;
typedef unsigned short nuWord;
typedef unsigned char  nuByte;
typedef unsigned long  nuLongDWord;
#else
typedef unsigned int   nuDWord;
typedef unsigned short nuWord;
typedef unsigned char  nuByte;
typedef unsigned long long nuLongDWord;
#endif

#if defined(NUPOSTAG_USEINTERNALSTATS)

typedef struct{
 nuDWord  good;
 nuDWord  bad,unkbad;
 nuDWord  lost;
 nuDWord* missed;
 nuDWord* wrong;
}nuStats;

#endif

#define NUUNKWORD   1
#define NUWRONGTAG  2

typedef struct{
 nuDWord      dwPos;
 nuWord       wLen;
#if defined(NUPOSTAG_USEBIN) 
 nuByte       bPos;
#else 
 const char*  szPos;
#endif 
 nuByte       _info;
 nuByte*      _attr; 
}nuToken;

typedef struct{
 nuToken   *Tokens;
 nuWord     nTokens,mTokens;
}nuTokenbag;

typedef struct{
 nuByte*bin;
 nuWord*idx;
 nuWord size;
}nuDATA;

typedef struct{
 nuDATA  BG;
 nuDATA  LEX;
 nuDATA  ULEX; 
 nuByte *POS;
 nuByte *PCK4;
 nuByte  mLEX;
 nuDWord size;
}nuLANG;

#define nu_doparse      1
#define nu_fasterpostag 2
#define nu_checkquality 4
#define nu_usemonograms 8

#if defined NUPOSTAG_IMPLEMENT

#if defined NUPOSTAG_NOMALLOCDEPENDENCIES

#ifndef NULL 
#define NULL (void*)0
#endif

#define MAXDYNMEM 2048
nuByte gMEM[MAXDYNMEM];
nuWord giMEM=0;

void*nuMalloc(int requested)
{
 nuByte*ret=&gMEM[giMEM];
 if(giMEM+requested<MAXDYNMEM)
  return ret;
 else
  return NULL; 
}

void*nuRealloc(void*mem,int requested)
{
 nuByte*ret=&gMEM[giMEM];
 if(giMEM+requested<MAXDYNMEM)
  return ret;
 else
  return NULL; 
}

void*nuFree(void*mem)
{
 return NULL; 
}

#else

#include <string.h>

#define nuMalloc(a)     malloc(a)
#define nuFree(a)       free(a)
#define nuRealloc(a,b)  realloc(a,b)

#endif

#if defined NUPOSTAG_NOCTYPEDEPENDENCIES

#define nuALPHA 1
#define nuUPPER 2
#define nuLOWER 4
#define nuDIGIT 8
#define nuPUNCT 16
#define nuSPACE 32

nuByte nuAnsiMAP[]={0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x10,0x10,0x10,0x10,0x10,
0x10,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x10,0x10,0x10,0x10,0x00,
0x00,0x00,0x10,0x05,0x10,0x10,0x10,0x10,0x00,0x10,0x03,0x10,0x03,0x00,0x03,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x05,0x10,0x05,0x00,0x05,0x03,
0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x15,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x18,0x18,0x10,0x15,0x10,0x10,0x10,0x18,0x15,0x10,0x10,0x10,0x10,0x10,
0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x10,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x05,
0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x10,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05};

int nuIsCType(int a,int mask)
{
 if((a>=32)&&(a<=255))
  return ((nuAnsiMAP[a-32]&mask)==mask);
 return 0; 
}

#define nuIsAlpha(a) nuIsCType(a,nuALPHA)
#define nuIsUpper(a) nuIsCType(a,nuUPPER)
#define nuIsLower(a) nuIsCType(a,nuLOWER)
#define nuIsDigit(a) nuIsCType(a,nuDIGIT)
#define nuIsSpace(a) nuIsCType(a,nuSPACE)
#define nuIsPunct(a) nuIsCType(a,nuPUNCT)

int nuMemCpy(void*a,const void*b,int len)
{
 nuByte*A=(nuByte*)a;
 const nuByte*B=(const nuByte*)b;
 while(len--)
  *A++ = *B++;
 return 0; 
}

int nuMemCmp(const void*a,const void*b,int len)
{
 const nuByte*A=(const nuByte*)a;
 const nuByte*B=(const nuByte*)b;
 while(len--)
  {
   int dif=*A++ - *B++;
   if(dif)
    return dif;
  }
 return 0; 
}

void nuStrLwr(nuByte*s)
{
 while(*s)
  if(nuIsUpper(*s))
   {
    if(*s==159)
     *s=*s+96;
    else 
    if((*s==138)||(*s==140)||(*s==142))
     *s=*s+16;
    else 
     *s=*s+32;
    s++;
   }
  else
   s++; 
}

void nuStrUpr(nuByte*s)
{
 while(*s)
  if(nuIsLower(*s))
   {
    if((*s==131)||(*s==170)||(*s==181)||(*s==186)||(*s==223))
     ;
    else
    if(*s==159+96)
     *s=*s-96;
    else 
    if((*s==138+16)||(*s==140+16)||(*s==142+16))
     *s=*s-16;
    else 
     *s=*s-32;
    s++;
   }
  else
   s++; 
}

nuWord nuStrLen(const nuByte*s)
{
 const nuByte*ss=s;
 while(*s) s++;
 return (nuWord)(s-ss);
}

int nuStrCmp(const nuByte*a,const nuByte*b)
{
 while(*a&&*b)
  {
   int dif=*a++ - *b++;
   if(dif)
    return dif;
  }  
 return *a-*b;
}
#else

#include <ctype.h>
#include <string.h>

#define nuMalloc(a)     malloc(a)
#define nuFree(a)       free(a)
#define nuRealloc(a,b)  realloc(a,b)

#define nuMemCpy(a,b,c) memcpy(a,b,c)
#define nuMemCmp(a,b,c) memcmp(a,b,c)

#define nuStrCmp(a,b)   strcmp(a,b)
#define nuStrLen(a)     (nuWord)strlen(a)

#define nuStrLwr(a)     _strlwr(a)

#define nuIsAlpha(a)    isalpha(a)
#define nuIsUpper(a)    isupper(a)
#define nuIsDigit(a)    isdigit(a)

#define nuMin(a,b)      min(a,b)

#endif

#if defined NUPOSTAG_USEDATAH

#include "nuEN_data8K.h"

#else

nuByte nuENBG[]={0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x55,0x58,0x5f,0x01,0x2d,0x61,0x5d,0x44,0x3f,0x20,0x4d,0x64,0x60,0x42,0x5d,0x31,0x01,0x52,0x4c,0x57,0x3e,0x01,0x42,
0x21,0x01,0x25,0x56,0x57,0x51,0x53,0x4f,0x54,0x46,0x01,0x01,0x40,0x01,0x09,0x1a,0x0a,0x05,0x0b,0x64,0x0e,0x3b,0x0f,0x13,0x14,0x12,0x15,0x5a,0x17,0x12,0x1a,0x1b,
0x1b,0x03,0x1c,0x19,0x25,0x05,0x2d,0x22,0x0a,0x64,0x0a,0x64,0x03,0x04,0x05,0x05,0x06,0x03,0x08,0x06,0x09,0x1b,0x0b,0x1c,0x0e,0x43,0x0f,0x05,0x13,0x03,0x14,0x1b,
0x15,0x30,0x17,0x0d,0x1a,0x3c,0x1c,0x06,0x21,0x0c,0x24,0x42,0x25,0x07,0x26,0x03,0x28,0x64,0x29,0x07,0x03,0x2a,0x09,0x43,0x0a,0x0f,0x0b,0x64,0x0e,0x3f,0x0f,0x1e,
0x13,0x07,0x14,0x24,0x15,0x5e,0x17,0x14,0x1a,0x1f,0x1b,0x03,0x1c,0x28,0x21,0x06,0x24,0x26,0x25,0x21,0x26,0x0f,0x27,0x06,0x28,0x17,0x29,0x1a,0x2a,0x09,0x2c,0x06,
0x2d,0x09,0x02,0x33,0x09,0x07,0x0a,0x0a,0x0b,0x14,0x0e,0x18,0x0f,0x0e,0x14,0x12,0x15,0x64,0x17,0x04,0x1a,0x06,0x1c,0x07,0x23,0x04,0x26,0x06,0x2d,0x08,0x04,0x64,
0x07,0x53,0x08,0x2d,0x09,0x1e,0x0a,0x05,0x0b,0x0d,0x0e,0x3e,0x0f,0x07,0x13,0x0a,0x14,0x1b,0x15,0x13,0x17,0x0b,0x1a,0x04,0x1c,0x0a,0x21,0x0b,0x23,0x04,0x24,0x10,
0x27,0x0b,0x28,0x1b,0x03,0x64,0x06,0x08,0x02,0x14,0x07,0x0f,0x09,0x36,0x0a,0x64,0x0b,0x62,0x0e,0x3c,0x0f,0x21,0x13,0x09,0x14,0x21,0x15,0x59,0x17,0x1a,0x1a,0x20,
0x1b,0x06,0x1c,0x2d,0x21,0x08,0x23,0x08,0x24,0x0e,0x25,0x13,0x26,0x0a,0x27,0x09,0x28,0x0e,0x29,0x0a,0x2a,0x04,0x2c,0x06,0x2d,0x37,0x02,0x0b,0x04,0x05,0x0a,0x1b,
0x0b,0x46,0x0e,0x20,0x0f,0x45,0x10,0x06,0x13,0x06,0x14,0x4a,0x15,0x64,0x17,0x2c,0x1a,0x17,0x1b,0x0a,0x1c,0x1f,0x21,0x04,0x23,0x14,0x24,0x17,0x25,0x0e,0x26,0x09,
0x27,0x07,0x28,0x0e,0x2d,0x03,0x04,0x2e,0x06,0x04,0x07,0x23,0x08,0x03,0x09,0x08,0x0a,0x61,0x0b,0x0d,0x0e,0x2b,0x0f,0x12,0x14,0x64,0x15,0x06,0x17,0x4d,0x21,0x12,
0x24,0x03,0x0a,0x04,0x0f,0x2e,0x14,0x64,0x15,0x17,0x17,0x0f,0x13,0x10,0x1c,0x04,0x24,0x20,0x27,0x32,0x28,0x64,0x03,0x13,0x04,0x20,0x05,0x05,0x06,0x03,0x07,0x22,
0x08,0x05,0x09,0x05,0x0d,0x64,0x0e,0x0d,0x0f,0x0d,0x13,0x03,0x14,0x1e,0x15,0x56,0x17,0x0d,0x19,0x03,0x21,0x07,0x28,0x11,0x02,0x08,0x0a,0x12,0x0b,0x64,0x0e,0x06,
0x0f,0x1b,0x14,0x21,0x15,0x2d,0x17,0x12,0x1a,0x09,0x1b,0x0a,0x1c,0x04,0x25,0x09,0x04,0x06,0x07,0x05,0x09,0x03,0x0a,0x03,0x0e,0x0c,0x0f,0x10,0x14,0x64,0x15,0x08,
0x17,0x34,0x21,0x06,0x04,0x0b,0x07,0x0f,0x09,0x06,0x0e,0x64,0x0f,0x0f,0x14,0x53,0x15,0x05,0x17,0x34,0x21,0x07,0x02,0x03,0x04,0x07,0x07,0x04,0x0a,0x15,0x0b,0x05,
0x0e,0x2e,0x0f,0x1f,0x14,0x64,0x15,0x03,0x17,0x2c,0x1c,0x05,0x27,0x04,0x04,0x32,0x06,0x5d,0x07,0x64,0x08,0x25,0x1c,0x14,0x23,0x64,0x04,0x2e,0x07,0x2c,0x08,0x04,
0x09,0x10,0x0e,0x64,0x0f,0x03,0x13,0x07,0x14,0x31,0x15,0x03,0x17,0x1f,0x19,0x08,0x1c,0x07,0x21,0x10,0x24,0x12,0x25,0x03,0x26,0x04,0x28,0x12,0x29,0x03,0x04,0x24,
0x07,0x0e,0x09,0x0a,0x0a,0x05,0x0e,0x0a,0x14,0x0f,0x15,0x64,0x16,0x04,0x17,0x06,0x19,0x0e,0x24,0x10,0x28,0x0a,0x04,0x2c,0x07,0x19,0x08,0x07,0x09,0x1a,0x0e,0x17,
0x13,0x08,0x14,0x0d,0x15,0x64,0x16,0x05,0x17,0x03,0x19,0x08,0x1c,0x04,0x21,0x04,0x24,0x19,0x27,0x13,0x28,0x08,0x2a,0x03,0x04,0x35,0x07,0x39,0x08,0x07,0x09,0x19,
0x0b,0x07,0x0e,0x64,0x0f,0x07,0x13,0x0c,0x14,0x08,0x17,0x04,0x19,0x03,0x1c,0x0d,0x21,0x10,0x24,0x1e,0x25,0x06,0x26,0x08,0x27,0x24,0x28,0x03,0x29,0x05,0x2a,0x03,
0x0b,0x64,0x1b,0x08,0x0a,0x06,0x0f,0x33,0x11,0x06,0x14,0x64,0x15,0x19,0x17,0x20,0x25,0x03,0x04,0x08,0x07,0x0c,0x09,0x03,0x0b,0x04,0x0e,0x0e,0x0f,0x03,0x13,0x31,
0x1c,0x15,0x21,0x06,0x23,0x05,0x24,0x64,0x27,0x49,0x28,0x5a,0x0a,0x04,0x0f,0x35,0x14,0x64,0x15,0x0b,0x17,0x2b,0x02,0x09,0x04,0x4a,0x07,0x26,0x08,0x03,0x09,0x06,
0x0a,0x1f,0x0b,0x26,0x0e,0x64,0x0f,0x50,0x10,0x0a,0x13,0x08,0x14,0x09,0x15,0x05,0x17,0x03,0x1a,0x06,0x1c,0x38,0x1d,0x06,0x21,0x14,0x23,0x50,0x24,0x2a,0x25,0x17,
0x26,0x3e,0x27,0x15,0x28,0x1e,0x04,0x13,0x07,0x26,0x09,0x06,0x0b,0x1e,0x0e,0x49,0x0f,0x64,0x1c,0x18,0x21,0x05,0x23,0x04,0x26,0x06,0x0e,0x05,0x0f,0x64,0x1c,0x0f,
0x26,0x06,0x02,0x03,0x04,0x12,0x07,0x17,0x09,0x04,0x0a,0x08,0x0b,0x56,0x0e,0x64,0x0f,0x14,0x14,0x13,0x15,0x0a,0x17,0x13,0x1b,0x14,0x1c,0x11,0x21,0x14,0x25,0x07,
0x08,0x64,0x0a,0x0c,0x0d,0x03,0x0e,0x06,0x14,0x09,0x15,0x06,0x1c,0x03,0x28,0x03,0x02,0x07,0x0a,0x0d,0x0b,0x13,0x0f,0x05,0x14,0x05,0x15,0x07,0x17,0x04,0x23,0x64,
0x03,0x06,0x04,0x64,0x06,0x06,0x07,0x2d,0x0e,0x04,0x21,0x09,0x22,0x06,0x23,0x04,0x02,0x03,0x04,0x07,0x07,0x0b,0x09,0x04,0x0a,0x08,0x0b,0x64,0x0e,0x31,0x0f,0x26,
0x10,0x05,0x14,0x1c,0x15,0x0e,0x17,0x16,0x1a,0x10,0x1b,0x14,0x1c,0x15,0x1f,0x0e,0x21,0x13,0x25,0x07,0x26,0x26,0x02,0x08,0x04,0x0d,0x07,0x1a,0x0a,0x26,0x0b,0x64,
0x0e,0x43,0x0f,0x1f,0x10,0x04,0x14,0x13,0x15,0x20,0x17,0x0d,0x1a,0x23,0x1b,0x0f,0x1c,0x31,0x1f,0x09,0x21,0x21,0x25,0x0d,0x26,0x37,0x2d,0x03,0x02,0x03,0x04,0x06,
0x07,0x08,0x09,0x05,0x0a,0x09,0x0b,0x64,0x0e,0x48,0x0f,0x25,0x10,0x04,0x14,0x42,0x15,0x14,0x17,0x2e,0x1a,0x0c,0x1b,0x0f,0x1c,0x14,0x1f,0x0d,0x21,0x31,0x26,0x0d,
0x04,0x09,0x07,0x0d,0x09,0x03,0x0a,0x03,0x0b,0x12,0x0e,0x64,0x0f,0x0c,0x14,0x12,0x15,0x06,0x17,0x0a,0x1c,0x0d,0x1f,0x05,0x21,0x1d,0x25,0x05,0x26,0x08,0x04,0x0c,
0x07,0x0b,0x0a,0x05,0x0b,0x47,0x0e,0x38,0x0f,0x34,0x10,0x04,0x14,0x11,0x15,0x0b,0x17,0x14,0x1a,0x15,0x1b,0x06,0x1c,0x63,0x1d,0x03,0x1f,0x05,0x21,0x1e,0x25,0x33,
0x26,0x64,0x04,0x0f,0x07,0x13,0x0a,0x0c,0x0b,0x64,0x0e,0x37,0x0f,0x2e,0x10,0x04,0x14,0x16,0x15,0x25,0x17,0x09,0x1a,0x0f,0x1b,0x07,0x1c,0x54,0x1f,0x04,0x21,0x1e,
0x25,0x24,0x26,0x5b,0x2d,0x05,0x0b,0x09,0x0f,0x03,0x13,0x2f,0x14,0x05,0x15,0x07,0x17,0x06,0x1a,0x0c,0x1c,0x0f,0x24,0x4d,0x27,0x32,0x28,0x64,0x0b,0x11,0x0e,0x05,
0x13,0x18,0x14,0x04,0x15,0x07,0x17,0x03,0x1a,0x20,0x1c,0x11,0x24,0x64,0x27,0x3e,0x28,0x53,0x02,0x03,0x0a,0x03,0x0f,0x30,0x14,0x64,0x15,0x0d,0x17,0x52,0x25,0x03,
0x04,0x04,0x0a,0x03,0x0b,0x64,0x0e,0x04,0x0f,0x27,0x13,0x04,0x14,0x17,0x15,0x28,0x17,0x1d,0x1a,0x57,0x1b,0x09,0x1c,0x0f,0x21,0x0b,0x25,0x04,0x28,0x03,0x09,0x09,
0x0a,0x03,0x0b,0x45,0x0c,0x0a,0x0e,0x1e,0x0f,0x36,0x13,0x05,0x14,0x28,0x15,0x23,0x17,0x10,0x1a,0x64,0x1b,0x04,0x1c,0x17,0x23,0x0d,0x24,0x05,0x25,0x07,0x26,0x05,
0x27,0x05,0x28,0x08,0x2a,0x04,0x2c,0x05};

nuWord nuENIBG[]={0x002e,0x0048,0x004a,0x004c,0x0074,0x00a2,0x00be,0x00e4,0x00e8,0x011a,0x0146,0x0162,0x016c,0x0176,0x0198,0x01b0,0x01c4,0x01d6,0x01ee,0x01f6,0x01fa,0x021e,0x0236,0x0258,0x0280,0x0284,0x0292,0x02ac,0x02b6,0x02e6,0x02fa,0x0302,
0x0320,0x0330,0x0340,0x0350,0x0376,0x039c,0x03c0,0x03de,0x0402,0x0426,0x043c,0x0452,0x0460,0x047e,0x04a8};

nuByte nuENULEX[]={0x30,0x00,0x01,0x09,0x30,0x2e,0x30,0x00,0x01,0x09,0x30,0x30,0x00,0x01,0x09,0x30,0x30,0x30,0x00,0x01,0x09,0x30,0x30,0x30,0x30,0x00,0x01,0x09,0x55,0x00,0x01,0x14,
0x55,0x2e,0x00,0x01,0x14,0x55,0x61,0x00,0x01,0x14,0x55,0x61,0x6c,0x00,0x01,0x14,0x55,0x61,0x6d,0x00,0x01,0x14,0x55,0x61,0x6e,0x00,0x01,0x14,0x55,0x61,0x6e,0x64,
0x00,0x01,0x14,0x55,0x61,0x72,0x64,0x00,0x01,0x14,0x55,0x61,0x73,0x00,0x01,0x14,0x55,0x61,0x74,0x65,0x00,0x01,0x14,0x55,0x61,0x79,0x00,0x01,0x14,0x55,0x63,0x00,
0x01,0x14,0x55,0x63,0x65,0x00,0x01,0x14,0x55,0x63,0x68,0x00,0x01,0x14,0x55,0x63,0x6b,0x00,0x01,0x14,0x55,0x63,0x6f,0x00,0x01,0x14,0x55,0x64,0x00,0x01,0x14,0x55,
0x65,0x00,0x01,0x14,0x55,0x65,0x64,0x00,0x02,0x14,0x39,0x0e,0x2a,0x55,0x65,0x6c,0x00,0x01,0x14,0x55,0x65,0x6c,0x6c,0x00,0x01,0x14,0x55,0x65,0x6e,0x00,0x01,0x14,
0x55,0x65,0x6e,0x74,0x00,0x01,0x14,0x55,0x65,0x72,0x00,0x01,0x14,0x55,0x65,0x72,0x73,0x00,0x02,0x14,0x37,0x16,0x2c,0x55,0x65,0x73,0x00,0x03,0x14,0x2f,0x15,0x21,
0x16,0x12,0x55,0x65,0x74,0x00,0x01,0x14,0x55,0x65,0x79,0x00,0x01,0x14,0x55,0x67,0x00,0x01,0x14,0x55,0x67,0x65,0x00,0x01,0x14,0x55,0x68,0x00,0x01,0x14,0x55,0x69,
0x00,0x01,0x14,0x55,0x69,0x61,0x00,0x01,0x14,0x55,0x69,0x61,0x6e,0x00,0x01,0x0e,0x55,0x69,0x63,0x00,0x01,0x14,0x55,0x69,0x6e,0x00,0x01,0x14,0x55,0x69,0x6e,0x67,
0x00,0x01,0x14,0x55,0x69,0x6f,0x6e,0x00,0x01,0x14,0x55,0x69,0x73,0x00,0x01,0x14,0x55,0x6b,0x00,0x01,0x14,0x55,0x6c,0x00,0x01,0x14,0x55,0x6c,0x64,0x00,0x01,0x14,
0x55,0x6c,0x65,0x00,0x01,0x14,0x55,0x6c,0x6c,0x00,0x01,0x14,0x55,0x6c,0x79,0x00,0x02,0x1b,0x3c,0x14,0x27,0x55,0x6d,0x00,0x01,0x14,0x55,0x6d,0x61,0x6e,0x00,0x01,
0x14,0x55,0x6e,0x00,0x01,0x14,0x55,0x6e,0x61,0x00,0x01,0x14,0x55,0x6e,0x63,0x65,0x00,0x01,0x14,0x55,0x6e,0x64,0x00,0x01,0x14,0x55,0x6e,0x65,0x00,0x01,0x14,0x55,
0x6e,0x67,0x00,0x01,0x14,0x55,0x6e,0x73,0x00,0x02,0x14,0x36,0x15,0x2d,0x55,0x6e,0x74,0x00,0x01,0x14,0x55,0x6f,0x00,0x01,0x14,0x55,0x6f,0x6e,0x00,0x01,0x14,0x55,
0x6f,0x72,0x00,0x01,0x14,0x55,0x70,0x00,0x01,0x14,0x55,0x72,0x00,0x01,0x14,0x55,0x72,0x64,0x00,0x01,0x14,0x55,0x72,0x65,0x00,0x01,0x14,0x55,0x72,0x73,0x00,0x03,
0x14,0x2c,0x16,0x1d,0x15,0x19,0x55,0x72,0x74,0x00,0x01,0x14,0x55,0x72,0x79,0x00,0x01,0x14,0x55,0x73,0x00,0x02,0x14,0x45,0x15,0x1e,0x55,0x73,0x65,0x00,0x01,0x14,
0x55,0x73,0x65,0x64,0x00,0x01,0x0e,0x55,0x73,0x6f,0x6e,0x00,0x01,0x14,0x55,0x73,0x73,0x00,0x01,0x14,0x55,0x73,0x74,0x00,0x01,0x14,0x55,0x74,0x00,0x01,0x14,0x55,
0x74,0x61,0x00,0x01,0x14,0x55,0x74,0x65,0x00,0x01,0x14,0x55,0x74,0x65,0x72,0x00,0x01,0x14,0x55,0x74,0x68,0x00,0x01,0x14,0x55,0x74,0x6f,0x6e,0x00,0x01,0x14,0x55,
0x74,0x73,0x00,0x02,0x16,0x36,0x14,0x2d,0x55,0x74,0x79,0x00,0x01,0x14,0x55,0x75,0x73,0x00,0x01,0x14,0x55,0x77,0x00,0x01,0x14,0x55,0x78,0x00,0x01,0x14,0x55,0x79,
0x00,0x01,0x14,0x56,0x00,0x01,0x14,0x56,0x2e,0x00,0x01,0x14,0x56,0x41,0x00,0x01,0x14,0x56,0x43,0x00,0x01,0x14,0x56,0x53,0x00,0x01,0x14,0x6c,0x00,0x03,0x13,0x33,
0x16,0x1a,0x0e,0x15,0x6c,0x61,0x00,0x01,0x13,0x6c,0x61,0x67,0x65,0x00,0x01,0x13,0x6c,0x61,0x69,0x6e,0x00,0x01,0x22,0x6c,0x61,0x6c,0x00,0x01,0x0e,0x6c,0x61,0x6c,
0x73,0x00,0x01,0x16,0x6c,0x61,0x6e,0x00,0x01,0x13,0x6c,0x61,0x6e,0x74,0x00,0x01,0x0e,0x6c,0x61,0x72,0x00,0x02,0x0e,0x35,0x13,0x2e,0x6c,0x61,0x72,0x79,0x00,0x01,
0x0e,0x6c,0x61,0x74,0x65,0x00,0x03,0x22,0x28,0x0e,0x24,0x13,0x16,0x6c,0x61,0x79,0x00,0x01,0x13,0x6c,0x62,0x6c,0x65,0x00,0x01,0x0e,0x6c,0x63,0x00,0x01,0x0e,0x6c,
0x63,0x61,0x6c,0x00,0x01,0x0e,0x6c,0x63,0x65,0x00,0x01,0x13,0x6c,0x63,0x65,0x64,0x00,0x01,0x25,0x6c,0x63,0x65,0x73,0x00,0x01,0x16,0x6c,0x63,0x68,0x00,0x01,0x13,
0x6c,0x63,0x6b,0x00,0x01,0x13,0x6c,0x63,0x6b,0x73,0x00,0x01,0x16,0x6c,0x63,0x73,0x00,0x01,0x16,0x6c,0x63,0x74,0x00,0x02,0x13,0x3a,0x22,0x29,0x6c,0x63,0x74,0x73,
0x00,0x01,0x16,0x6c,0x63,0x79,0x00,0x01,0x13,0x6c,0x64,0x00,0x02,0x25,0x39,0x23,0x2a,0x6c,0x64,0x65,0x00,0x01,0x13,0x6c,0x64,0x65,0x64,0x00,0x02,0x23,0x37,0x25,
0x2c,0x6c,0x64,0x65,0x72,0x00,0x01,0x13,0x6c,0x64,0x73,0x00,0x02,0x16,0x45,0x27,0x1e,0x6c,0x64,0x79,0x00,0x01,0x13,0x6c,0x65,0x00,0x03,0x13,0x33,0x0e,0x18,0x22,
0x17,0x6c,0x65,0x64,0x00,0x02,0x25,0x3a,0x23,0x29,0x6c,0x65,0x6c,0x00,0x01,0x13,0x6c,0x65,0x6c,0x73,0x00,0x01,0x16,0x6c,0x65,0x6c,0x79,0x00,0x01,0x1b,0x6c,0x65,
0x6e,0x00,0x01,0x25,0x6c,0x65,0x6e,0x74,0x00,0x02,0x13,0x47,0x0e,0x1c,0x6c,0x65,0x72,0x00,0x01,0x13,0x6c,0x65,0x72,0x73,0x00,0x01,0x16,0x6c,0x65,0x72,0x79,0x00,
0x01,0x13,0x6c,0x65,0x73,0x00,0x01,0x16,0x6c,0x65,0x73,0x73,0x00,0x01,0x13,0x6c,0x65,0x73,0x74,0x00,0x01,0x10,0x6c,0x65,0x74,0x00,0x01,0x13,0x6c,0x65,0x74,0x73,
0x00,0x01,0x16,0x6c,0x66,0x00,0x01,0x13,0x6c,0x66,0x75,0x6c,0x00,0x01,0x0e,0x6c,0x67,0x00,0x02,0x24,0x4a,0x13,0x19,0x6c,0x67,0x65,0x00,0x02,0x13,0x4a,0x22,0x19,
0x6c,0x67,0x65,0x64,0x00,0x02,0x23,0x33,0x25,0x30,0x6c,0x67,0x65,0x73,0x00,0x01,0x16,0x6c,0x67,0x68,0x74,0x00,0x01,0x13,0x6c,0x67,0x73,0x00,0x01,0x16,0x6c,0x68,
0x00,0x03,0x13,0x38,0x0e,0x16,0x22,0x14,0x6c,0x68,0x65,0x64,0x00,0x02,0x25,0x36,0x23,0x2d,0x6c,0x68,0x74,0x00,0x01,0x13,0x6c,0x69,0x61,0x6c,0x00,0x01,0x0e,0x6c,
0x69,0x63,0x00,0x01,0x0e,0x6c,0x69,0x63,0x65,0x00,0x01,0x13,0x6c,0x69,0x63,0x73,0x00,0x01,0x16,0x6c,0x69,0x65,0x64,0x00,0x01,0x25,0x6c,0x69,0x65,0x73,0x00,0x01,
0x16,0x6c,0x69,0x6e,0x00,0x02,0x13,0x33,0x22,0x30,0x6c,0x69,0x6e,0x65,0x00,0x01,0x13,0x6c,0x69,0x6e,0x67,0x00,0x01,0x24,0x6c,0x69,0x6f,0x6e,0x00,0x01,0x13,0x6c,
0x69,0x70,0x00,0x01,0x13,0x6c,0x69,0x73,0x65,0x00,0x01,0x13,0x6c,0x69,0x73,0x74,0x00,0x01,0x13,0x6c,0x69,0x74,0x00,0x01,0x13,0x6c,0x69,0x74,0x73,0x00,0x01,0x16,
0x6c,0x69,0x74,0x79,0x00,0x01,0x13,0x6c,0x69,0x76,0x65,0x00,0x01,0x0e,0x6c,0x6b,0x00,0x02,0x13,0x45,0x22,0x1e,0x6c,0x6b,0x65,0x64,0x00,0x02,0x23,0x34,0x25,0x2f,
0x6c,0x6b,0x73,0x00,0x01,0x16,0x6c,0x6c,0x00,0x02,0x0e,0x3b,0x13,0x28,0x6c,0x6c,0x65,0x00,0x02,0x0e,0x3d,0x13,0x26,0x6c,0x6c,0x65,0x64,0x00,0x02,0x25,0x39,0x23,
0x2a,0x6c,0x6c,0x65,0x73,0x00,0x01,0x16,0x6c,0x6c,0x6c,0x00,0x02,0x13,0x44,0x22,0x1f,0x6c,0x6c,0x6c,0x73,0x00,0x01,0x16,0x6c,0x6c,0x6c,0x79,0x00,0x01,0x1b,0x6c,
0x6c,0x73,0x00,0x01,0x16,0x6c,0x6c,0x79,0x00,0x01,0x1b,0x6c,0x6d,0x00,0x01,0x13,0x6c,0x6d,0x65,0x00,0x01,0x13,0x6c,0x6d,0x65,0x64,0x00,0x02,0x25,0x34,0x23,0x30,
0x6c,0x6d,0x73,0x00,0x01,0x16,0x6c,0x6e,0x00,0x01,0x13,0x6c,0x6e,0x61,0x6c,0x00,0x01,0x0e,0x6c,0x6e,0x63,0x65,0x00,0x01,0x13,0x6c,0x6e,0x64,0x00,0x02,0x13,0x3c,
0x22,0x27,0x6c,0x6e,0x64,0x73,0x00,0x02,0x16,0x3e,0x27,0x25,0x6c,0x6e,0x65,0x00,0x01,0x13,0x6c,0x6e,0x65,0x64,0x00,0x02,0x25,0x38,0x23,0x2b,0x6c,0x6e,0x65,0x73,
0x00,0x01,0x16,0x6c,0x6e,0x67,0x00,0x01,0x24,0x6c,0x6e,0x67,0x73,0x00,0x01,0x16,0x6c,0x6e,0x73,0x00,0x01,0x16,0x6c,0x6e,0x74,0x00,0x02,0x13,0x44,0x0e,0x1f,0x6c,
0x6e,0x74,0x73,0x00,0x01,0x16,0x6c,0x6f,0x00,0x01,0x13,0x6c,0x6f,0x6e,0x00,0x01,0x13,0x6c,0x6f,0x6e,0x73,0x00,0x01,0x16,0x6c,0x6f,0x72,0x00,0x01,0x13,0x6c,0x6f,
0x72,0x73,0x00,0x01,0x16,0x6c,0x6f,0x72,0x74,0x00,0x01,0x13,0x6c,0x6f,0x72,0x79,0x00,0x01,0x13,0x6c,0x6f,0x75,0x73,0x00,0x01,0x0e,0x6c,0x70,0x00,0x02,0x13,0x4a,
0x22,0x19,0x6c,0x70,0x65,0x64,0x00,0x02,0x25,0x32,0x23,0x32,0x6c,0x70,0x73,0x00,0x01,0x16,0x6c,0x72,0x00,0x01,0x13,0x6c,0x72,0x61,0x6c,0x00,0x01,0x0e,0x6c,0x72,
0x65,0x00,0x02,0x13,0x43,0x22,0x20,0x6c,0x72,0x65,0x64,0x00,0x02,0x25,0x3f,0x23,0x24,0x6c,0x72,0x65,0x73,0x00,0x01,0x16,0x6c,0x72,0x6c,0x79,0x00,0x01,0x1b,0x6c,
0x72,0x73,0x00,0x01,0x16,0x6c,0x72,0x74,0x00,0x01,0x13,0x6c,0x72,0x74,0x73,0x00,0x01,0x16,0x6c,0x72,0x79,0x00,0x02,0x13,0x42,0x0e,0x21,0x6c,0x73,0x00,0x01,0x16,
0x6c,0x73,0x65,0x00,0x02,0x13,0x45,0x22,0x1e,0x6c,0x73,0x65,0x64,0x00,0x02,0x25,0x3c,0x23,0x27,0x6c,0x73,0x65,0x73,0x00,0x02,0x16,0x45,0x27,0x1e,0x6c,0x73,0x73,
0x00,0x01,0x13,0x6c,0x73,0x74,0x00,0x02,0x13,0x46,0x10,0x1d,0x6c,0x73,0x74,0x73,0x00,0x01,0x16,0x6c,0x74,0x00,0x01,0x13,0x6c,0x74,0x65,0x00,0x03,0x13,0x23,0x22,
0x22,0x0e,0x1d,0x6c,0x74,0x65,0x64,0x00,0x02,0x25,0x41,0x23,0x22,0x6c,0x74,0x65,0x72,0x00,0x01,0x13,0x6c,0x74,0x65,0x73,0x00,0x02,0x16,0x3c,0x27,0x27,0x6c,0x74,
0x68,0x00,0x01,0x13,0x6c,0x74,0x69,0x63,0x00,0x01,0x0e,0x6c,0x74,0x6c,0x79,0x00,0x01,0x1b,0x6c,0x74,0x6f,0x72,0x00,0x01,0x13,0x6c,0x74,0x73,0x00,0x01,0x16,0x6c,
0x74,0x79,0x00,0x01,0x13,0x6c,0x75,0x61,0x6c,0x00,0x01,0x0e,0x6c,0x75,0x6c,0x00,0x01,0x0e,0x6c,0x75,0x6d,0x00,0x01,0x13,0x6c,0x75,0x72,0x65,0x00,0x01,0x13,0x6c,
0x75,0x73,0x00,0x01,0x0e,0x6c,0x76,0x65,0x00,0x02,0x0e,0x43,0x22,0x20,0x6c,0x76,0x65,0x64,0x00,0x02,0x25,0x33,0x23,0x30,0x6c,0x76,0x65,0x73,0x00,0x02,0x16,0x39,
0x27,0x2a,0x6c,0x77,0x00,0x02,0x13,0x39,0x22,0x2a,0x6c,0x77,0x73,0x00,0x02,0x16,0x34,0x27,0x2f,0x6c,0x79,0x00,0x03,0x13,0x2a,0x1b,0x29,0x0e,0x10,0x6c,0x79,0x73,
0x00,0x01,0x16,0x6f,0x00,0x01,0x0e,0x6f,0x64,0x00,0x01,0x0e,0x6f,0x65,0x00,0x01,0x0e,0x6f,0x65,0x64,0x00,0x01,0x0e,0x6f,0x72,0x00,0x01,0x0e,0x6f,0x73,0x00,0x01,
0x16,0x6f,0x74,0x00,0x01,0x0e};

nuWord nuENUIDX[]={0x0000,0x0004,0x000a,0x000f,0x0015,0x001c,0x0020,0x0025,0x002a,0x0030,0x0036,0x003c,0x0043,0x004a,0x0050,0x0057,0x005d,0x0062,0x0068,0x006e,0x0074,0x007a,0x007f,0x0084,0x008d,0x0093,0x009a,0x00a0,0x00a7,0x00ad,0x00b7,0x00c2,
0x00c8,0x00ce,0x00d3,0x00d9,0x00de,0x00e3,0x00e9,0x00f0,0x00f6,0x00fc,0x0103,0x010a,0x0110,0x0115,0x011a,0x0120,0x0126,0x012c,0x0135,0x013a,0x0141,0x0146,0x014c,0x0153,0x0159,0x015f,0x0165,0x016e,0x0174,0x0179,0x017f,0x0185,
0x018a,0x018f,0x0195,0x019b,0x01a6,0x01ac,0x01b2,0x01ba,0x01c0,0x01c7,0x01ce,0x01d4,0x01da,0x01df,0x01e5,0x01eb,0x01f2,0x01f8,0x01ff,0x0208,0x020e,0x0214,0x0219,0x021e,0x0223,0x0227,0x022c,0x0231,0x0236,0x023b,0x0244,0x0249,
0x0250,0x0257,0x025d,0x0264,0x026a,0x0271,0x027a,0x0281,0x028d,0x0293,0x029a,0x029f,0x02a6,0x02ac,0x02b3,0x02ba,0x02c0,0x02c6,0x02cd,0x02d3,0x02dc,0x02e3,0x02e9,0x02f1,0x02f7,0x0301,0x0308,0x0311,0x0317,0x0321,0x032a,0x0330,
0x0337,0x033e,0x0344,0x034e,0x0354,0x035b,0x0362,0x0368,0x036f,0x0376,0x037c,0x0383,0x0388,0x038f,0x0397,0x03a0,0x03aa,0x03b1,0x03b8,0x03be,0x03c8,0x03d2,0x03d8,0x03df,0x03e5,0x03ec,0x03f3,0x03fa,0x0401,0x040a,0x0411,0x0418,
0x041f,0x0425,0x042c,0x0433,0x0439,0x0440,0x0447,0x044e,0x0456,0x0460,0x0466,0x046e,0x0477,0x0481,0x0488,0x0491,0x0498,0x049f,0x04a5,0x04ab,0x04b0,0x04b6,0x04c0,0x04c6,0x04cb,0x04d2,0x04d9,0x04e2,0x04ec,0x04f2,0x04fc,0x0503,
0x0509,0x0510,0x0516,0x051f,0x0526,0x052b,0x0531,0x0538,0x053e,0x0545,0x054c,0x0553,0x055a,0x0562,0x056c,0x0572,0x0577,0x057e,0x0587,0x0591,0x0598,0x059f,0x05a5,0x05ab,0x05b2,0x05bb,0x05c0,0x05c9,0x05d3,0x05dd,0x05e3,0x05ec,
0x05f3,0x05f8,0x0603,0x060d,0x0614,0x061e,0x0624,0x062b,0x0632,0x0639,0x063f,0x0645,0x064c,0x0652,0x0658,0x065f,0x0665,0x066e,0x0678,0x0682,0x068a,0x0693,0x069d,0x06a3,0x06a7,0x06ac,0x06b1,0x06b7,0x06bc,0x06c1};

#define nuLEXMAXLEN 21

nuByte nuENLEX[]={0x02,0x00,0x01,0x0d,0x02,0x06,0x04,0x09,0x00,0x01,0x13,0x02,0x09,0x13,0x64,0x00,0x01,0x1b,0x02,0x0f,0x03,0x00,0x01,0x1b,0x02,0x0f,0x70,0x0a,0x0f,0x0d,0x00,0x01,
0x0e,0x02,0x63,0x04,0x61,0x0e,0x64,0x00,0x02,0x23,0x32,0x25,0x31,0x02,0x63,0x6c,0x75,0x0f,0x00,0x02,0x26,0x42,0x22,0x21,0x02,0x63,0x6c,0x75,0x0f,0x73,0x00,0x01,
0x27,0x02,0x74,0x6f,0x00,0x01,0x0d,0x04,0x09,0x72,0x75,0x63,0x74,0x75,0x17,0x07,0x00,0x01,0x13,0x04,0x16,0x72,0x64,0x00,0x01,0x13,0x04,0x63,0x0a,0x74,0x00,0x01,
0x0e,0x04,0x63,0x65,0x69,0x11,0x00,0x01,0x22,0x04,0x63,0x65,0x69,0x11,0x64,0x00,0x02,0x23,0x3a,0x25,0x29,0x04,0x64,0x75,0x63,0x65,0x00,0x01,0x22,0x04,0x6d,0x61,
0x02,0x00,0x02,0x22,0x44,0x26,0x1f,0x04,0x6d,0x61,0x02,0x73,0x00,0x01,0x27,0x04,0x70,0x19,0x06,0x64,0x00,0x01,0x23,0x08,0x1a,0x6d,0x10,0x65,0x00,0x01,0x13,0x08,
0x74,0x10,0x65,0x00,0x01,0x13,0x09,0x0c,0x06,0x64,0x00,0x01,0x23,0x09,0x10,0x65,0x00,0x01,0x13,0x09,0x1d,0x07,0x00,0x01,0x0e,0x09,0x69,0x6c,0x6c,0x00,0x01,0x1b,
0x0a,0x64,0x00,0x01,0x13,0x0a,0x6f,0x75,0x67,0x68,0x00,0x02,0x1b,0x36,0x0e,0x2d,0x0b,0x00,0x01,0x0a,0x0b,0x64,0x00,0x01,0x08,0x0b,0x6e,0x6f,0x75,0x6e,0x63,0x03,
0x00,0x02,0x23,0x42,0x25,0x21,0x0b,0x6f,0x74,0x68,0x05,0x00,0x01,0x0a,0x0b,0x79,0x00,0x01,0x0a,0x0b,0x79,0x74,0x68,0x02,0x67,0x00,0x01,0x13,0x0c,0x1a,0x63,0x12,
0x00,0x01,0x13,0x0c,0x65,0x00,0x01,0x26,0x0c,0x6f,0x75,0x18,0x00,0x02,0x0d,0x53,0x1e,0x10,0x0e,0x11,0x6e,0x00,0x01,0x09,0x0e,0x16,0x18,0x00,0x01,0x0e,0x0e,0x17,
0x08,0x00,0x01,0x13,0x0e,0x65,0x00,0x01,0x22,0x0e,0x65,0x6b,0x00,0x01,0x22,0x0e,0x65,0x6d,0x73,0x00,0x01,0x27,0x0e,0x6c,0x1c,0x07,0x00,0x02,0x24,0x42,0x13,0x21,
0x0e,0x6c,0x6c,0x00,0x01,0x22,0x0e,0x6e,0x69,0x19,0x00,0x01,0x0e,0x0e,0x70,0x0c,0x10,0x65,0x00,0x01,0x0e,0x0e,0x74,0x00,0x03,0x25,0x35,0x23,0x17,0x22,0x16,0x0f,
0x15,0x00,0x01,0x13,0x0f,0x63,0x1c,0x6e,0x03,0x00,0x01,0x23,0x0f,0x73,0x70,0x69,0x06,0x00,0x01,0x0d,0x10,0x00,0x01,0x0d,0x11,0x72,0x79,0x00,0x01,0x1b,0x12,0x61,
0x09,0x00,0x01,0x10,0x12,0x73,0x73,0x00,0x02,0x0f,0x40,0x1c,0x23,0x13,0x63,0x68,0x00,0x01,0x0a,0x13,0x72,0x1c,0x05,0x00,0x01,0x1c,0x13,0x72,0x6c,0x79,0x00,0x02,
0x0e,0x45,0x1b,0x1e,0x13,0x72,0x6e,0x03,0x00,0x01,0x23,0x14,0x00,0x01,0x0d,0x14,0x63,0x65,0x00,0x01,0x1b,0x14,0x65,0x00,0x01,0x09,0x15,0x04,0x61,0x64,0x79,0x00,
0x01,0x1b,0x15,0x14,0x67,0x00,0x02,0x0d,0x54,0x1e,0x0f,0x15,0x6c,0x00,0x01,0x0a,0x15,0x6c,0x6f,0x77,0x00,0x01,0x22,0x15,0x6d,0x6f,0x09,0x00,0x01,0x1b,0x15,0x73,
0x6f,0x00,0x01,0x1b,0x15,0x74,0x68,0x6f,0x75,0x67,0x68,0x00,0x01,0x0d,0x15,0x77,0x61,0x79,0x73,0x00,0x01,0x1b,0x16,0x0d,0x02,0x75,0x08,0x00,0x01,0x27,0x16,0x0d,
0x02,0x75,0x65,0x00,0x01,0x22,0x16,0x0d,0x1d,0x6c,0x00,0x01,0x13,0x16,0x6d,0x08,0x00,0x01,0x27,0x16,0x6d,0x65,0x00,0x01,0x22,0x16,0x6d,0x6d,0x0a,0x74,0x00,0x02,
0x22,0x36,0x13,0x2d,0x16,0x6d,0x6d,0x14,0x00,0x01,0x0e,0x16,0x6d,0x70,0x6f,0x73,0x69,0x06,0x00,0x01,0x0e,0x16,0x72,0x70,0x19,0x10,0x65,0x00,0x01,0x0e,0x16,0x75,
0x6c,0x64,0x00,0x01,0x12,0x17,0x67,0x68,0x74,0x00,0x03,0x13,0x2a,0x0e,0x1e,0x1b,0x1b,0x19,0x00,0x01,0x08,0x1b,0x00,0x01,0x27,0x1c,0x6b,0x65,0x00,0x01,0x0d,0x1c,
0x6b,0x65,0x6c,0x79,0x00,0x01,0x0e,0x1d,0x0e,0x00,0x01,0x23,0x1d,0x12,0x00,0x01,0x13,0x23,0x00,0x01,0x00,0x24,0x00,0x01,0x01,0x25,0x00,0x01,0x13,0x26,0x00,0x01,
0x08,0x27,0x00,0x02,0x18,0x52,0x02,0x11,0x27,0x04,0x00,0x01,0x26,0x27,0x11,0x00,0x01,0x26,0x27,0x27,0x00,0x01,0x02,0x27,0x6c,0x6c,0x00,0x01,0x12,0x27,0x6d,0x00,
0x01,0x26,0x27,0x73,0x00,0x01,0x18,0x2c,0x00,0x01,0x03,0x2d,0x2d,0x00,0x01,0x07,0x2d,0x4c,0x43,0x42,0x2d,0x00,0x01,0x04,0x2d,0x4c,0x52,0x42,0x2d,0x00,0x01,0x04,
0x2d,0x52,0x43,0x42,0x2d,0x00,0x01,0x05,0x2d,0x52,0x52,0x42,0x2d,0x00,0x01,0x05,0x2e,0x00,0x01,0x06,0x2e,0x2e,0x2e,0x00,0x01,0x07,0x3a,0x00,0x01,0x07,0x3b,0x00,
0x01,0x07,0x3f,0x00,0x01,0x06,0x41,0x6d,0x05,0x69,0x63,0x0b,0x00,0x02,0x14,0x3c,0x0e,0x27,0x42,0x17,0x1a,0x73,0x68,0x00,0x02,0x0e,0x40,0x14,0x23,0x45,0x75,0x1d,
0x70,0x13,0x6e,0x00,0x01,0x0e,0x46,0x04,0x6e,0x63,0x68,0x00,0x01,0x0e,0x47,0x05,0x6d,0x0b,0x00,0x01,0x0e,0x49,0x00,0x01,0x19,0x4a,0x61,0x70,0x0b,0x08,0x65,0x00,
0x01,0x0e,0x4a,0x75,0x6c,0x79,0x00,0x01,0x14,0x4d,0x6f,0x09,0x00,0x01,0x10,0x53,0x15,0x08,0x00,0x01,0x16,0x53,0x65,0x63,0x75,0x17,0x1a,0x08,0x00,0x02,0x15,0x3b,
0x14,0x28,0x53,0x6f,0x00,0x02,0x1b,0x44,0x0d,0x1f,0x53,0x6f,0x76,0x69,0x65,0x74,0x00,0x02,0x0e,0x36,0x14,0x2d,0x54,0x56,0x00,0x02,0x13,0x40,0x14,0x23,0x54,0x68,
0x10,0x00,0x01,0x0a,0x57,0x08,0x06,0x72,0x6e,0x00,0x02,0x14,0x38,0x0e,0x2b,0x60,0x00,0x01,0x2c,0x60,0x60,0x00,0x01,0x2c,0x61,0x00,0x01,0x0a,0x61,0x11,0x72,0x61,
0x67,0x65,0x00,0x02,0x0e,0x37,0x13,0x2c,0x61,0x62,0x6f,0x11,0x00,0x01,0x0d,0x61,0x62,0x6f,0x75,0x74,0x00,0x01,0x0d,0x61,0x63,0x71,0x75,0x69,0x04,0x00,0x01,0x22,
0x61,0x64,0x11,0x72,0x1a,0x73,0x02,0x67,0x00,0x01,0x13,0x61,0x64,0x64,0x73,0x00,0x01,0x27,0x61,0x66,0x06,0x72,0x00,0x01,0x0d,0x61,0x67,0x04,0x03,0x00,0x01,0x23,
0x61,0x67,0x61,0x02,0x00,0x01,0x1b,0x61,0x67,0x61,0x02,0x09,0x00,0x01,0x0d,0x61,0x67,0x6f,0x00,0x01,0x1b,0x61,0x68,0x13,0x64,0x00,0x01,0x1b,0x61,0x69,0x64,0x00,
0x01,0x13,0x61,0x6d,0x14,0x67,0x00,0x01,0x0d,0x61,0x70,0x70,0x1d,0x76,0x15,0x00,0x01,0x13,0x61,0x73,0x00,0x01,0x0d,0x61,0x77,0x61,0x79,0x00,0x02,0x1b,0x4a,0x1e,
0x19,0x62,0x08,0x74,0x00,0x01,0x10,0x62,0x0b,0x6b,0x02,0x67,0x00,0x01,0x13,0x62,0x61,0x63,0x6b,0x00,0x02,0x1b,0x4f,0x1e,0x14,0x62,0x61,0x64,0x00,0x01,0x0e,0x62,
0x61,0x73,0x1b,0x00,0x01,0x13,0x62,0x65,0x00,0x01,0x22,0x62,0x65,0x16,0x6d,0x65,0x00,0x02,0x22,0x3a,0x25,0x29,0x62,0x65,0x1c,0x65,0x11,0x00,0x02,0x26,0x41,0x22,
0x23,0x62,0x65,0x1c,0x65,0x11,0x73,0x00,0x01,0x27,0x62,0x65,0x63,0x61,0x6d,0x65,0x00,0x01,0x23,0x62,0x65,0x63,0x61,0x75,0x0e,0x00,0x01,0x0d,0x62,0x65,0x66,0x19,
0x65,0x00,0x01,0x0d,0x62,0x65,0x67,0x02,0x00,0x01,0x22,0x62,0x65,0x67,0x0b,0x00,0x01,0x23,0x62,0x65,0x68,0x02,0x64,0x00,0x01,0x0d,0x62,0x65,0x6c,0x6f,0x77,0x00,
0x01,0x0d,0x62,0x65,0x74,0x06,0x72,0x00,0x02,0x0f,0x45,0x1c,0x1e,0x62,0x65,0x74,0x77,0x65,0x0a,0x00,0x01,0x0d,0x62,0x69,0x64,0x00,0x01,0x13,0x62,0x69,0x67,0x00,
0x01,0x0e,0x62,0x69,0x6c,0x1c,0x14,0x00,0x01,0x09,0x62,0x6c,0x61,0x63,0x6b,0x00,0x01,0x0e,0x62,0x6f,0x0c,0x64,0x00,0x01,0x13,0x62,0x6f,0x74,0x68,0x00,0x01,0x0a,
0x62,0x6f,0x75,0x67,0x68,0x74,0x00,0x02,0x23,0x3e,0x25,0x25,0x62,0x75,0x69,0x6c,0x64,0x00,0x01,0x22,0x62,0x75,0x69,0x6c,0x64,0x02,0x67,0x00,0x02,0x13,0x43,0x24,
0x20,0x62,0x75,0x74,0x00,0x01,0x08,0x62,0x75,0x79,0x00,0x01,0x22,0x62,0x75,0x79,0x02,0x67,0x00,0x02,0x24,0x40,0x13,0x23,0x62,0x75,0x79,0x2d,0x6f,0x75,0x74,0x00,
0x01,0x13,0x62,0x79,0x00,0x01,0x0d,0x63,0x05,0x74,0x61,0x02,0x00,0x01,0x0e,0x63,0x0b,0x00,0x01,0x12,0x63,0x15,0x6c,0x73,0x00,0x02,0x27,0x40,0x16,0x23,0x63,0x61,
0x00,0x01,0x12,0x63,0x61,0x6d,0x65,0x00,0x01,0x23,0x63,0x61,0x70,0x69,0x74,0x15,0x00,0x01,0x13,0x63,0x68,0x69,0x63,0x61,0x67,0x6f,0x00,0x01,0x14,0x63,0x68,0x69,
0x65,0x66,0x00,0x02,0x0e,0x36,0x13,0x2d,0x63,0x68,0x69,0x6c,0x64,0x04,0x6e,0x00,0x01,0x16,0x63,0x6c,0x6f,0x0e,0x00,0x04,0x22,0x22,0x13,0x19,0x0e,0x15,0x1b,0x12,
0x63,0x6c,0x6f,0x0e,0x64,0x00,0x01,0x23,0x63,0x75,0x72,0x04,0x0d,0x00,0x01,0x0e,0x63,0x75,0x74,0x00,0x03,0x22,0x32,0x13,0x1a,0x25,0x17,0x64,0x10,0x61,0x00,0x01,
0x16,0x64,0x14,0x65,0x00,0x01,0x25,0x64,0x1d,0x70,0x70,0x03,0x00,0x01,0x23,0x64,0x69,0x64,0x00,0x01,0x23,0x64,0x69,0x66,0x66,0x05,0x0a,0x74,0x00,0x01,0x0e,0x64,
0x69,0x66,0x66,0x69,0x63,0x75,0x6c,0x74,0x00,0x01,0x0e,0x64,0x6f,0x00,0x02,0x26,0x42,0x22,0x21,0x64,0x6f,0x08,0x00,0x01,0x27,0x64,0x6f,0x6c,0x6c,0x0c,0x00,0x01,
0x13,0x64,0x6f,0x77,0x6e,0x00,0x02,0x1b,0x3c,0x1e,0x27,0x64,0x72,0x75,0x67,0x00,0x01,0x13,0x64,0x75,0x17,0x07,0x00,0x01,0x0d,0x64,0x75,0x65,0x00,0x01,0x0e,0x65,
0x11,0x6e,0x00,0x01,0x1b,0x65,0x11,0x72,0x00,0x01,0x1b,0x65,0x11,0x72,0x79,0x00,0x01,0x0a,0x65,0x69,0x67,0x68,0x74,0x00,0x01,0x09,0x65,0x78,0x61,0x6d,0x70,0x12,
0x00,0x01,0x13,0x65,0x78,0x65,0x63,0x75,0x1a,0x11,0x00,0x02,0x13,0x41,0x0e,0x22,0x65,0x78,0x70,0x65,0x63,0x74,0x00,0x02,0x26,0x3e,0x22,0x25,0x65,0x78,0x70,0x65,
0x63,0x74,0x73,0x00,0x01,0x27,0x66,0x02,0x0b,0x63,0x02,0x67,0x00,0x01,0x13,0x66,0x02,0x0b,0x63,0x65,0x00,0x02,0x13,0x40,0x22,0x23,0x66,0x02,0x64,0x00,0x01,0x22,
0x66,0x04,0x65,0x00,0x01,0x0e,0x66,0x0c,0x00,0x01,0x1b,0x66,0x19,0x00,0x01,0x0d,0x66,0x19,0x65,0x69,0x67,0x6e,0x00,0x01,0x0e,0x66,0x19,0x6d,0x05,0x00,0x01,0x0e,
0x66,0x1d,0x6d,0x00,0x01,0x0d,0x66,0x61,0x63,0x65,0x00,0x02,0x13,0x42,0x22,0x21,0x66,0x61,0x69,0x12,0x64,0x00,0x02,0x23,0x40,0x25,0x23,0x66,0x61,0x6d,0x69,0x6c,
0x79,0x00,0x01,0x13,0x66,0x65,0x6c,0x6c,0x00,0x01,0x23,0x66,0x65,0x77,0x00,0x01,0x0e,0x66,0x69,0x11,0x00,0x01,0x09,0x66,0x69,0x1c,0x07,0x00,0x01,0x13,0x66,0x69,
0x72,0x09,0x00,0x01,0x0e,0x66,0x6f,0x6f,0x64,0x00,0x01,0x13,0x66,0x6f,0x75,0x18,0x00,0x02,0x23,0x41,0x25,0x22,0x66,0x6f,0x75,0x72,0x00,0x01,0x09,0x66,0x6f,0x75,
0x72,0x74,0x68,0x00,0x01,0x0e,0x66,0x75,0x6c,0x6c,0x00,0x01,0x0e,0x66,0x75,0x72,0x74,0x68,0x05,0x00,0x02,0x0e,0x42,0x1c,0x21,0x66,0x75,0x74,0x75,0x04,0x00,0x02,
0x0e,0x3c,0x13,0x27,0x67,0x04,0x10,0x00,0x01,0x0e,0x67,0x04,0x10,0x05,0x00,0x01,0x0f,0x67,0x61,0x02,0x03,0x00,0x01,0x23,0x67,0x61,0x11,0x00,0x01,0x23,0x67,0x61,
0x73,0x00,0x01,0x13,0x67,0x65,0x74,0x00,0x01,0x22,0x67,0x69,0x11,0x00,0x01,0x22,0x67,0x6f,0x00,0x01,0x22,0x67,0x6f,0x6c,0x64,0x00,0x01,0x13,0x67,0x6f,0x6f,0x64,
0x00,0x01,0x0e,0x67,0x6f,0x74,0x00,0x01,0x23,0x68,0x05,0x00,0x02,0x1a,0x49,0x19,0x1a,0x68,0x05,0x65,0x00,0x01,0x1b,0x68,0x0c,0x64,0x00,0x01,0x0e,0x68,0x13,0x64,
0x00,0x01,0x13,0x68,0x13,0x76,0x79,0x00,0x01,0x0e,0x68,0x15,0x66,0x00,0x02,0x13,0x46,0x17,0x1d,0x68,0x1b,0x00,0x01,0x1a,0x68,0x61,0x11,0x00,0x02,0x26,0x40,0x22,
0x23,0x68,0x61,0x64,0x00,0x01,0x23,0x68,0x61,0x73,0x00,0x01,0x27,0x68,0x65,0x00,0x01,0x19,0x68,0x65,0x6c,0x70,0x00,0x01,0x22,0x68,0x65,0x6c,0x70,0x03,0x00,0x02,
0x23,0x41,0x25,0x22,0x68,0x69,0x67,0x68,0x00,0x01,0x0e,0x68,0x69,0x67,0x68,0x05,0x00,0x01,0x0f,0x68,0x69,0x6d,0x00,0x01,0x19,0x68,0x69,0x6d,0x0e,0x6c,0x66,0x00,
0x01,0x19,0x68,0x6f,0x6c,0x64,0x73,0x00,0x01,0x27,0x68,0x6f,0x77,0x00,0x01,0x2b,0x68,0x6f,0x77,0x65,0x11,0x72,0x00,0x01,0x1b,0x68,0x75,0x67,0x65,0x00,0x01,0x0e,
0x69,0x66,0x00,0x01,0x0d,0x69,0x74,0x00,0x01,0x19,0x69,0x74,0x0e,0x6c,0x66,0x00,0x01,0x19,0x69,0x74,0x73,0x00,0x01,0x1a,0x6a,0x6f,0x02,0x74,0x00,0x01,0x0e,0x6a,
0x75,0x09,0x00,0x01,0x1b,0x6a,0x75,0x6d,0x70,0x03,0x00,0x01,0x23,0x6b,0x65,0x65,0x70,0x00,0x01,0x22,0x6b,0x65,0x79,0x00,0x01,0x0e,0x6b,0x6e,0x6f,0x77,0x00,0x02,
0x22,0x3b,0x26,0x28,0x6b,0x6e,0x6f,0x77,0x6e,0x00,0x01,0x25,0x6c,0x0c,0x67,0x65,0x00,0x01,0x0e,0x6c,0x10,0x05,0x00,0x01,0x1b,0x6c,0x10,0x65,0x00,0x01,0x0e,0x6c,
0x14,0x67,0x00,0x02,0x0e,0x35,0x1b,0x2e,0x6c,0x61,0x09,0x00,0x01,0x0e,0x6c,0x6f,0x09,0x00,0x02,0x23,0x3e,0x25,0x25,0x6c,0x6f,0x77,0x00,0x01,0x0e,0x6c,0x6f,0x77,
0x05,0x00,0x01,0x0f,0x6d,0x03,0x69,0x61,0x00,0x01,0x16,0x6d,0x0a,0x00,0x01,0x16,0x6d,0x0b,0x75,0x66,0x61,0x63,0x74,0x75,0x17,0x07,0x00,0x02,0x13,0x42,0x24,0x21,
0x6d,0x0b,0x79,0x00,0x01,0x0e,0x6d,0x0c,0x6b,0x65,0x1a,0x07,0x00,0x01,0x13,0x6d,0x13,0x6e,0x73,0x00,0x01,0x27,0x6d,0x13,0x6e,0x77,0x68,0x69,0x12,0x00,0x01,0x1b,
0x6d,0x19,0x65,0x00,0x02,0x0f,0x39,0x1c,0x2a,0x6d,0x19,0x65,0x6f,0x11,0x72,0x00,0x01,0x1b,0x6d,0x61,0x02,0x00,0x01,0x0e,0x6d,0x61,0x0f,0x00,0x02,0x25,0x3b,0x23,
0x28,0x6d,0x61,0x6a,0x19,0x00,0x01,0x0e,0x6d,0x61,0x6b,0x08,0x00,0x01,0x27,0x6d,0x61,0x6b,0x65,0x00,0x01,0x22,0x6d,0x61,0x79,0x00,0x01,0x12,0x6d,0x65,0x00,0x01,
0x19,0x6d,0x65,0x65,0x1a,0x07,0x00,0x01,0x13,0x6d,0x65,0x65,0x74,0x00,0x01,0x22,0x6d,0x69,0x67,0x68,0x74,0x00,0x01,0x12,0x6d,0x69,0x6c,0x1c,0x14,0x00,0x01,0x09,
0x6d,0x6f,0x09,0x00,0x02,0x1d,0x32,0x10,0x31,0x6d,0x6f,0x11,0x00,0x02,0x13,0x43,0x22,0x20,0x6d,0x75,0x09,0x00,0x01,0x12,0x6d,0x75,0x63,0x68,0x00,0x02,0x0e,0x36,
0x1b,0x2d,0x6d,0x79,0x00,0x01,0x1a,0x6e,0x02,0x65,0x00,0x01,0x09,0x6e,0x13,0x72,0x00,0x01,0x0d,0x6e,0x27,0x74,0x00,0x01,0x1b,0x6e,0x65,0x03,0x00,0x03,0x26,0x30,
0x13,0x1c,0x22,0x17,0x6e,0x65,0x11,0x72,0x00,0x01,0x1b,0x6e,0x65,0x74,0x00,0x01,0x0e,0x6e,0x65,0x77,0x00,0x01,0x0e,0x6e,0x65,0x77,0x73,0x00,0x01,0x13,0x6e,0x65,
0x78,0x74,0x00,0x01,0x0e,0x6e,0x6f,0x00,0x01,0x0a,0x6e,0x6f,0x06,0x64,0x00,0x01,0x23,0x6e,0x6f,0x74,0x00,0x01,0x1b,0x6e,0x6f,0x74,0x68,0x02,0x67,0x00,0x01,0x13,
0x6e,0x6f,0x77,0x00,0x01,0x1b,0x6f,0x11,0x72,0x00,0x02,0x0d,0x56,0x1e,0x0d,0x6f,0x66,0x00,0x01,0x0d,0x6f,0x66,0x06,0x6e,0x00,0x01,0x1b,0x6f,0x66,0x66,0x00,0x01,
0x1e,0x6f,0x66,0x66,0x05,0x02,0x67,0x00,0x01,0x13,0x6f,0x66,0x66,0x69,0x63,0x69,0x15,0x00,0x02,0x13,0x43,0x0e,0x20,0x6f,0x69,0x6c,0x00,0x01,0x13,0x6f,0x6c,0x64,
0x00,0x01,0x0e,0x6f,0x70,0x05,0x10,0x02,0x67,0x00,0x02,0x24,0x33,0x13,0x30,0x6f,0x70,0x0a,0x00,0x02,0x0e,0x42,0x22,0x21,0x6f,0x74,0x68,0x05,0x00,0x01,0x0e,0x6f,
0x75,0x72,0x00,0x01,0x1a,0x6f,0x75,0x74,0x00,0x02,0x1e,0x3d,0x0d,0x26,0x6f,0x75,0x74,0x09,0x0b,0x64,0x02,0x67,0x00,0x01,0x0e,0x6f,0x77,0x6e,0x00,0x01,0x0e,0x6f,
0x77,0x6e,0x73,0x00,0x01,0x27,0x70,0x05,0x00,0x01,0x0d,0x70,0x05,0x68,0x61,0x70,0x73,0x00,0x01,0x1b,0x70,0x05,0x69,0x6f,0x64,0x00,0x01,0x13,0x70,0x17,0x76,0x10,
0x65,0x00,0x01,0x0e,0x70,0x1d,0x64,0x75,0x63,0x65,0x00,0x01,0x22,0x70,0x1d,0x70,0x6f,0x73,0x15,0x00,0x01,0x13,0x70,0x1d,0x76,0x69,0x0f,0x00,0x01,0x22,0x70,0x1d,
0x76,0x69,0x0f,0x73,0x00,0x01,0x27,0x70,0x61,0x09,0x00,0x01,0x0e,0x70,0x61,0x79,0x00,0x01,0x22,0x70,0x65,0x6f,0x70,0x12,0x00,0x01,0x16,0x70,0x6c,0x0b,0x73,0x00,
0x02,0x16,0x38,0x27,0x2b,0x70,0x6c,0x0b,0x74,0x00,0x01,0x13,0x70,0x6f,0x09,0x03,0x00,0x01,0x23,0x70,0x75,0x74,0x00,0x03,0x22,0x30,0x23,0x1b,0x25,0x17,0x71,0x75,
0x0c,0x06,0x72,0x6c,0x79,0x00,0x01,0x0e,0x72,0x10,0x68,0x05,0x00,0x01,0x1b,0x72,0x61,0x1b,0x65,0x00,0x01,0x22,0x73,0x02,0x63,0x65,0x00,0x01,0x0d,0x73,0x15,0x65,
0x00,0x01,0x13,0x73,0x61,0x69,0x64,0x00,0x01,0x23,0x73,0x61,0x6d,0x65,0x00,0x01,0x0e,0x73,0x61,0x79,0x00,0x01,0x26,0x73,0x61,0x79,0x73,0x00,0x01,0x27,0x73,0x63,
0x68,0x6f,0x6f,0x6c,0x00,0x01,0x13,0x73,0x68,0x19,0x74,0x00,0x01,0x0e,0x73,0x68,0x65,0x00,0x01,0x19,0x73,0x68,0x6f,0x75,0x6c,0x64,0x00,0x01,0x12,0x73,0x68,0x6f,
0x77,0x00,0x03,0x13,0x27,0x22,0x25,0x26,0x16,0x73,0x68,0x6f,0x77,0x03,0x00,0x01,0x23,0x73,0x69,0x78,0x00,0x01,0x09,0x73,0x6d,0x15,0x12,0x72,0x00,0x01,0x0f,0x73,
0x6d,0x15,0x6c,0x00,0x01,0x0e,0x73,0x6f,0x00,0x01,0x1b,0x73,0x6f,0x14,0x00,0x01,0x1b,0x73,0x6f,0x6d,0x65,0x00,0x01,0x0a,0x73,0x6f,0x6d,0x65,0x74,0x68,0x02,0x67,
0x00,0x01,0x13,0x73,0x70,0x0a,0x64,0x02,0x67,0x00,0x01,0x13,0x73,0x70,0x17,0x07,0x00,0x01,0x13,0x73,0x75,0x62,0x73,0x69,0x64,0x69,0x0c,0x79,0x00,0x01,0x13,0x73,
0x75,0x63,0x68,0x00,0x01,0x0e,0x73,0x75,0x70,0x70,0x19,0x74,0x00,0x02,0x13,0x45,0x22,0x1e,0x74,0x61,0x6b,0x65,0x00,0x01,0x22,0x74,0x68,0x02,0x67,0x00,0x01,0x13,
0x74,0x68,0x02,0x6b,0x00,0x02,0x26,0x3e,0x22,0x25,0x74,0x68,0x04,0x65,0x00,0x01,0x09,0x74,0x68,0x05,0x65,0x00,0x01,0x0b,0x74,0x68,0x08,0x65,0x00,0x01,0x0a,0x74,
0x68,0x0a,0x00,0x01,0x1b,0x74,0x68,0x0b,0x00,0x01,0x0d,0x74,0x68,0x10,0x00,0x02,0x0d,0x46,0x28,0x1d,0x74,0x68,0x1b,0x00,0x01,0x0a,0x74,0x68,0x1d,0x75,0x67,0x68,
0x00,0x01,0x0d,0x74,0x68,0x65,0x00,0x01,0x0a,0x74,0x68,0x65,0x69,0x72,0x00,0x01,0x1a,0x74,0x68,0x65,0x6d,0x00,0x01,0x19,0x74,0x68,0x65,0x6d,0x0e,0x6c,0x11,0x73,
0x00,0x01,0x19,0x74,0x68,0x65,0x79,0x00,0x01,0x19,0x74,0x68,0x69,0x72,0x64,0x00,0x01,0x0e,0x74,0x68,0x6f,0x0e,0x00,0x01,0x0a,0x74,0x68,0x6f,0x75,0x67,0x68,0x00,
0x01,0x0d,0x74,0x68,0x75,0x73,0x00,0x01,0x1b,0x74,0x6f,0x00,0x01,0x20,0x74,0x6f,0x67,0x65,0x74,0x68,0x05,0x00,0x01,0x1b,0x74,0x6f,0x6c,0x64,0x00,0x01,0x23,0x74,
0x6f,0x6f,0x00,0x01,0x1b,0x74,0x6f,0x6f,0x6b,0x00,0x01,0x23,0x74,0x6f,0x70,0x00,0x01,0x0e,0x74,0x6f,0x74,0x15,0x00,0x02,0x0e,0x3f,0x13,0x24,0x74,0x6f,0x77,0x0c,
0x64,0x00,0x01,0x0d,0x74,0x72,0x61,0x64,0x02,0x67,0x00,0x01,0x13,0x74,0x72,0x79,0x00,0x01,0x22,0x74,0x77,0x6f,0x00,0x01,0x09,0x75,0x0d,0x69,0x6c,0x00,0x01,0x0d,
0x75,0x0e,0x00,0x02,0x13,0x37,0x22,0x2c,0x75,0x18,0x05,0x00,0x01,0x0d,0x75,0x6e,0x12,0x73,0x73,0x00,0x01,0x0d,0x75,0x6e,0x63,0x68,0x0b,0x67,0x03,0x00,0x01,0x0e,
0x75,0x70,0x00,0x02,0x1e,0x3d,0x1b,0x26,0x75,0x73,0x00,0x01,0x19,0x76,0x69,0x61,0x00,0x01,0x0d,0x77,0x05,0x65,0x00,0x01,0x23,0x77,0x0a,0x74,0x00,0x01,0x23,0x77,
0x0b,0x06,0x64,0x00,0x01,0x23,0x77,0x0b,0x74,0x00,0x02,0x26,0x3f,0x22,0x24,0x77,0x0b,0x74,0x73,0x00,0x01,0x27,0x77,0x19,0x6c,0x64,0x00,0x01,0x13,0x77,0x61,0x73,
0x00,0x01,0x23,0x77,0x65,0x00,0x01,0x19,0x77,0x65,0x6c,0x6c,0x00,0x01,0x1b,0x77,0x68,0x05,0x65,0x00,0x01,0x2b,0x77,0x68,0x0a,0x00,0x01,0x2b,0x77,0x68,0x10,0x00,
0x01,0x29,0x77,0x68,0x65,0x74,0x68,0x05,0x00,0x01,0x0d,0x77,0x68,0x69,0x12,0x00,0x01,0x0d,0x77,0x68,0x69,0x63,0x68,0x00,0x01,0x28,0x77,0x68,0x6f,0x00,0x01,0x29,
0x77,0x68,0x6f,0x0e,0x00,0x01,0x2a,0x77,0x68,0x79,0x00,0x01,0x2b,0x77,0x69,0x6c,0x6c,0x00,0x01,0x12,0x77,0x69,0x74,0x68,0x00,0x01,0x0d,0x77,0x69,0x74,0x68,0x02,
0x00,0x01,0x0d,0x77,0x69,0x74,0x68,0x6f,0x75,0x74,0x00,0x01,0x0d,0x77,0x6f,0x00,0x01,0x12,0x77,0x6f,0x6d,0x0a,0x00,0x01,0x16,0x77,0x6f,0x75,0x6c,0x64,0x00,0x01,
0x12,0x79,0x0a,0x00,0x02,0x16,0x37,0x13,0x2c,0x79,0x13,0x72,0x00,0x01,0x13,0x79,0x65,0x74,0x00,0x01,0x1b,0x79,0x69,0x65,0x6c,0x64,0x00,0x02,0x22,0x3a,0x13,0x29,
0x79,0x6f,0x75,0x00,0x01,0x19,0x79,0x6f,0x75,0x07,0x00,0x01,0x0e,0x79,0x6f,0x75,0x72,0x00,0x01,0x1a};

nuWord nuENIDX[]={0x0000,0x0004,0x000b,0x0012,0x0018,0x0021,0x002d,0x0038,0x0041,0x0047,0x0053,0x005a,0x0061,0x0069,0x0075,0x007d,0x0087,0x008f,0x0097,0x009f,0x00a6,0x00ad,0x00b3,0x00b9,0x00c0,0x00c5,0x00d0,0x00d4,0x00d9,0x00e6,0x00ee,0x00f3,
0x00fc,0x0103,0x0108,0x0112,0x0118,0x011e,0x0124,0x0129,0x012f,0x0136,0x0140,0x0146,0x014d,0x0155,0x015f,0x0164,0x016c,0x0174,0x0178,0x017e,0x0184,0x018d,0x0193,0x019a,0x01a4,0x01ab,0x01af,0x01b5,0x01ba,0x01c2,0x01cb,0x01d0,
0x01d7,0x01de,0x01e4,0x01ee,0x01f6,0x01fe,0x0206,0x020d,0x0213,0x0219,0x0224,0x022b,0x0235,0x023e,0x0245,0x0251,0x0255,0x0259,0x025f,0x0267,0x026c,0x0271,0x0275,0x0279,0x027d,0x0281,0x0288,0x028d,0x0292,0x0297,0x029d,0x02a2,
0x02a7,0x02ab,0x02b0,0x02b8,0x02c0,0x02c8,0x02d0,0x02d4,0x02da,0x02de,0x02e2,0x02e6,0x02f2,0x02fd,0x0306,0x030e,0x0315,0x0319,0x0322,0x0329,0x032f,0x0335,0x0342,0x034a,0x0356,0x035e,0x0364,0x036f,0x0373,0x0378,0x037c,0x0388,
0x038f,0x0397,0x03a0,0x03ab,0x03b2,0x03b9,0x03c0,0x03c7,0x03cf,0x03d5,0x03dc,0x03e2,0x03e9,0x03f2,0x03f7,0x0401,0x0407,0x040f,0x0419,0x041f,0x0426,0x042b,0x0436,0x0441,0x044a,0x0453,0x045c,0x0464,0x046b,0x0472,0x047a,0x0482,
0x048d,0x0496,0x049c,0x04a2,0x04aa,0x04b2,0x04b9,0x04c0,0x04cc,0x04d4,0x04e1,0x04e7,0x04ed,0x04f8,0x0502,0x0507,0x050f,0x0514,0x051e,0x0523,0x052a,0x0533,0x053d,0x0548,0x0552,0x0560,0x0568,0x0570,0x057b,0x0581,0x0587,0x058f,
0x0595,0x059f,0x05ab,0x05b3,0x05b9,0x05c1,0x05cb,0x05d2,0x05d9,0x05df,0x05e5,0x05eb,0x05f2,0x05fa,0x0603,0x0610,0x061c,0x0626,0x062f,0x063a,0x0640,0x0646,0x064b,0x0650,0x0659,0x0660,0x0666,0x0670,0x067b,0x0684,0x068b,0x0691,
0x0697,0x069e,0x06a5,0x06ac,0x06b6,0x06bd,0x06c6,0x06cd,0x06d9,0x06e4,0x06ea,0x06f1,0x06f8,0x06fe,0x0704,0x070a,0x0710,0x0715,0x071c,0x0723,0x0729,0x0731,0x0737,0x073d,0x0743,0x074a,0x0753,0x0758,0x0761,0x0767,0x076d,0x0772,
0x0779,0x0784,0x078b,0x0793,0x0799,0x07a2,0x07aa,0x07b0,0x07b9,0x07c0,0x07c5,0x07ca,0x07d2,0x07d8,0x07df,0x07e5,0x07ed,0x07f4,0x07fa,0x0804,0x080c,0x0813,0x0819,0x081f,0x0828,0x082e,0x0837,0x083d,0x0844,0x084b,0x0850,0x0860,
0x0866,0x086f,0x0876,0x0880,0x0889,0x0892,0x0898,0x08a1,0x08a8,0x08af,0x08b6,0x08bc,0x08c1,0x08c9,0x08d0,0x08d8,0x08e0,0x08e9,0x08f2,0x08f8,0x0902,0x0907,0x090d,0x0913,0x0919,0x0924,0x092b,0x0931,0x0937,0x093e,0x0945,0x094a,
0x0951,0x0957,0x0960,0x0966,0x096f,0x0974,0x097b,0x0981,0x098a,0x0997,0x099d,0x09a3,0x09af,0x09b8,0x09bf,0x09c5,0x09ce,0x09d9,0x09df,0x09e6,0x09eb,0x09f4,0x09fc,0x0a04,0x0a0d,0x0a16,0x0a1e,0x0a27,0x0a2d,0x0a33,0x0a3b,0x0a45,
0x0a4c,0x0a53,0x0a5e,0x0a68,0x0a6f,0x0a76,0x0a7d,0x0a83,0x0a8a,0x0a91,0x0a97,0x0a9e,0x0aa7,0x0aae,0x0ab4,0x0abd,0x0ac9,0x0ad1,0x0ad7,0x0adf,0x0ae6,0x0aeb,0x0af1,0x0af8,0x0b03,0x0b0c,0x0b13,0x0b1f,0x0b26,0x0b32,0x0b39,0x0b40,
0x0b4a,0x0b51,0x0b58,0x0b5f,0x0b65,0x0b6b,0x0b74,0x0b7a,0x0b83,0x0b89,0x0b91,0x0b98,0x0ba3,0x0baa,0x0bb2,0x0bb9,0x0bc2,0x0bc9,0x0bce,0x0bd8,0x0bdf,0x0be5,0x0bec,0x0bf2,0x0bfc,0x0c04,0x0c0d,0x0c13,0x0c19,0x0c20,0x0c28,0x0c2e,
0x0c36,0x0c40,0x0c48,0x0c4d,0x0c53,0x0c59,0x0c5f,0x0c66,0x0c6f,0x0c76,0x0c7d,0x0c83,0x0c88,0x0c8f,0x0c96,0x0c9c,0x0ca2,0x0cab,0x0cb2,0x0cba,0x0cc0,0x0cc7,0x0ccd,0x0cd4,0x0cdb,0x0ce3,0x0ced,0x0cf2,0x0cf9,0x0d01,0x0d09,0x0d0f,
0x0d15,0x0d20,0x0d26,0x0d2d};

nuByte nuEN4[]={0x00,0x1c,0x69,0x6e,0x65,0x64,0x72,0x65,0x65,0x72,0x74,0x65,0x6e,0x67,0x65,0x73,0x73,0x74,0x65,0x6e,0x61,0x6e,0x61,0x72,0x6e,0x74,0x73,0x65,0x64,0x65,0x61,0x74,
0x76,0x65,0x6c,0x65,0x65,0x61,0x6f,0x6e,0x61,0x6c,0x63,0x6f,0x72,0x69,0x6e,0x64,0x6f,0x72,0x74,0x69,0x69,0x73,0x6c,0x69,0x72,0x6f};

nuByte nuENPOS[]={0x2d,0x2e,0x30,0x32,0x35,0x37,0x3d,0x43,0x45,0x47,0x4a,0x4d,0x50,0x53,0x56,0x59,0x5c,0x60,0x64,0x67,0x6a,0x6d,0x71,0x76,0x7a,0x7e,0x82,0x86,0x8b,0x8e,0x92,0x96,
0x99,0x9d,0xa0,0xa3,0xa6,0xaa,0xae,0xb2,0xb6,0xba,0xbe,0xc1,0xc5,0xc9,0x23,0x00,0x24,0x00,0x27,0x27,0x00,0x2c,0x00,0x2d,0x4c,0x52,0x42,0x2d,0x00,0x2d,0x52,0x52,
0x42,0x2d,0x00,0x2e,0x00,0x3a,0x00,0x43,0x43,0x00,0x43,0x44,0x00,0x44,0x54,0x00,0x45,0x58,0x00,0x46,0x57,0x00,0x49,0x4e,0x00,0x4a,0x4a,0x00,0x4a,0x4a,0x52,0x00,
0x4a,0x4a,0x53,0x00,0x4c,0x53,0x00,0x4d,0x44,0x00,0x4e,0x4e,0x00,0x4e,0x4e,0x50,0x00,0x4e,0x4e,0x50,0x53,0x00,0x4e,0x4e,0x53,0x00,0x50,0x44,0x54,0x00,0x50,0x4f,
0x53,0x00,0x50,0x52,0x50,0x00,0x50,0x52,0x50,0x24,0x00,0x52,0x42,0x00,0x52,0x42,0x52,0x00,0x52,0x42,0x53,0x00,0x52,0x50,0x00,0x53,0x59,0x4d,0x00,0x54,0x4f,0x00,
0x55,0x48,0x00,0x56,0x42,0x00,0x56,0x42,0x44,0x00,0x56,0x42,0x47,0x00,0x56,0x42,0x4e,0x00,0x56,0x42,0x50,0x00,0x56,0x42,0x5a,0x00,0x57,0x44,0x54,0x00,0x57,0x50,
0x00,0x57,0x50,0x24,0x00,0x57,0x52,0x42,0x00,0x60,0x60,0x00};

#endif

nuLANG nuEN={
             {nuENBG,nuENIBG,0},
             {nuENLEX,nuENIDX,sizeof(nuENIDX)/sizeof(nuENIDX[0])},
             {nuENULEX,nuENUIDX,sizeof(nuENUIDX)/sizeof(nuENUIDX[0])},
             nuENPOS,
             nuEN4,
             nuLEXMAXLEN,
             sizeof(nuENPOS)+sizeof(nuENLEX)+sizeof(nuENIDX)+sizeof(nuENULEX)+sizeof(nuENUIDX)+sizeof(nuENBG)+sizeof(nuENIBG)+sizeof(nuEN4)
            };

void nuTokenbag_new(nuTokenbag*tokens)
{
 tokens->nTokens=0;tokens->mTokens=32;tokens->Tokens=(nuToken*)nuMalloc(sizeof(nuToken)*tokens->mTokens);
}

void nuTokenbag_reset(nuTokenbag*tokens)
{
 tokens->nTokens=0;
}

void nuTokenbag_delete(nuTokenbag*tokens)
{
 nuFree(tokens->Tokens);
}

int nuTokenbag_add(nuTokenbag*tokens,nuToken*tkn)
{
 if(tokens->nTokens+1==tokens->mTokens)
  {
   tokens->mTokens+=32;
   tokens->Tokens=(nuToken*)nuRealloc(tokens->Tokens,sizeof(nuToken)*tokens->mTokens);
  } 
 nuMemCpy(tokens->Tokens+tokens->nTokens,tkn,sizeof(nuToken)); 
 tokens->nTokens++;
 return tokens->nTokens-1;
}

int nuLM2patex(const nuByte*wrd,nuWord len,nuByte*pat,int cut)
{
 nuByte first=wrd[0];
 nuWord p=0;
 if(nuIsAlpha(first))
  if(nuIsUpper(first))
   {
   if(nuIsUpper(wrd[1])||(nuIsPunct(wrd[1])&&nuIsUpper(wrd[2])))
    pat[p++]=86;//'V'; 
   else 
    pat[p++]=85;//'U'; 
   } 
  else
   {
    nuByte code=108;//'l'
    nuWord k=1;
    while(k<len)
     if(nuIsLower(wrd[k]))
      k++;
     else
      {
       if(nuIsUpper(wrd[k]))
        code=109;//'m';
       else 
       if(nuIsDigit(wrd[k]))
        code=110;//'n';
       else 
        code=111;//'o';
       break;
      } 
    pat[p++]=code; 
   } 
 else
 if(nuIsDigit(first))
  pat[p++]=48;//'0';
 else 
  pat[p++]=first;
 if(cut==0)
  {
   pat[p]=0;
   return 1;
  }
 else 
 if(len-cut>=2)
  {   
   do
    {
     if(nuIsDigit((nuByte)wrd[len-cut]))
      pat[p++]=48;//'0';
     else
      pat[p++]=wrd[len-cut];
     cut--;
    }
   while(cut);
   pat[p]=0;
      
   return 1;
  }
 else  
  {
   pat[p]=0;
   return 0;
  } 
}

int nuLM2pat(const nuByte*wrd,nuByte*pat,int cut)
{
 return nuLM2patex(wrd,nuStrLen(wrd),pat,cut);
}

#if defined(NUPOSTAG_MULTILANG)
nuDWord nuSize(nuLANG*lang)
#else
nuDWord nuSize()
#endif
{
#if !defined(NUPOSTAG_MULTILANG)
 nuLANG*lang=&nuEN;
#endif 
 return lang->size;
}

#if defined(NUPOSTAG_MULTILANG)
nuDWord nuLexEntries(nuLANG*lang)
#else
nuDWord nuLexEntries()
#endif
{
#if !defined(NUPOSTAG_MULTILANG)
 nuLANG*lang=&nuEN;
#endif 
 return lang->LEX.size;
}

const char*nuTagSZ(int id)
{
 nuLANG*lang=&nuEN;
 if((id>=0)&&(id<lang->POS[0]))
  return lang->POS+lang->POS[1+id];
 else
  return ""; 
}

nuByte nuTagId(nuLANG*lang,const char*tag)
{
 nuByte n=0;
 for(n=0;n<lang->POS[0];n++)
  if(nuStrCmp(lang->POS+lang->POS[1+n],tag)==0)
   return n;
 return nuTAGUNK;  
}

int nuParse(nuLANG*lang,const char*text,nuTokenbag*tokens,nuDWord flags)
{
 nuDWord pos=0;
 while((text[pos]==' ')||(text[pos]=='\t')||(text[pos]=='\r')||(text[pos]=='\n')) pos++;
 while(text[pos])
 {
   nuToken tkn;
   nuWord len=0;
   #if defined(NUPOSTAG_USEBIN) 
   tkn.bPos=nuTAGUNK;
   #else
   tkn.szPos=NULL;   
   #endif
   tkn.dwPos=pos;
   while(text[pos+len]&&(text[pos+len]!=' ')&&(text[pos+len]!='\t')&&(text[pos+len]!='\r')&&(text[pos+len]!='\n'))
    len++;
   tkn.wLen=len; 
   if(flags&nu_checkquality)
    {     
     int j=len;
     while(j--)
      if(text[pos+j]=='/')
       { 
        char sPos[MAXPOSLEN];
        nuMemCpy(sPos,text+pos+j+1,len-j-1);sPos[len-j-1]=0;
        tkn.wLen=j;
        #if defined(NUPOSTAG_USEBIN) 
        tkn.bPos=nuTagId(lang,sPos); 
        #else
        tkn.szPos=nuTagSZ(nuTagId(lang,sPos)); 
        #endif       
        break;
       }
    }       
   nuTokenbag_add(tokens,&tkn);
   pos+=len;
   while((text[pos]==' ')||(text[pos]=='\t')||(text[pos]=='\r')||(text[pos]=='\n')) pos++;
 } 
 return tokens->nTokens;
}

nuByte*nuFind(const char*key,nuWord wLen,nuByte*mem,nuWord*idx,nuWord nmemb)
{
 nuDWord lim,base=0; 
 int     cmp;
 for (lim = nmemb; lim != 0; lim >>= 1) 
 {		
  nuDWord limh=(lim>>1);
		cmp = nuMemCmp(key, mem+idx[base+limh],wLen);		
		if((cmp==0)&&mem[idx[base+limh]+wLen])	
	  cmp=0-mem[idx[base+limh]+wLen];
		if (cmp == 0)
			return (mem+idx[base+limh]+wLen+1);
		if (cmp > 0) 
		 {	
			 base = base+limh+1;
			 lim--;
		 } 
	}
	return NULL;
}

nuWord nuPack(nuByte*pck4,const char*text,nuWord wLen,char*key)
{
 nuWord saved=0;
 #if defined(NUPOSTAG_DISABLEPACK)
 nuMemCpy(key,text,wLen);key[wLen]=0;
 return wLen;
#else
 nuWord i=0,k=0,z;
 nuByte split=*pck4++;
 nuByte topsplit=*pck4++;
 while(i<wLen)
  {   
   if((i+3<=wLen)&&split)
    {
     for(z=0;z<split;z++)
      if(nuMemCmp(text+i,pck4+z*3,3)==0)
       { 
        key[k++]=2+z;
        i+=3;
        saved+=3-1;
        break;
       }
     if(z<split)  
      continue;
    }  
   if((i+2<=wLen)&&(topsplit-split))
    {
     for(z=0;z<topsplit-split;z++)
      if(nuMemCmp(text+i,pck4+split*3+z*2,2)==0)
       { 
        key[k++]=2+z+split;
        i+=2;
        saved+=2-1;
        break;
       }
     if(z<(topsplit-split))  
      continue; 
    }
   key[k++]=text[i++];  
  }
 key[k]=0;     
 return k; 
#endif   
}

nuByte*nuFindToken(nuLANG*lang,const char*text,nuDWord dwPos,nuWord wLen)
{ 
 nuWord     nmemb=lang->LEX.size;
 nuByte*    mem=lang->LEX.bin;
 nuWord*    idx=lang->LEX.idx; 
 char       key[MAXLEXLEN];
 wLen=nuPack(lang->PCK4,text+dwPos,wLen,key);
 return nuFind(key,wLen,mem,idx,nmemb); 
}

nuByte*nuFindUToken(nuLANG*lang,const char*key)
{ 
 nuWord     nmemb=lang->ULEX.size;
 nuByte*    mem=lang->ULEX.bin;
 nuWord*    idx=lang->ULEX.idx;
 nuWord     wLen=nuStrLen(key); 
 return nuFind(key,wLen,mem,idx,nmemb);
}

nuLongDWord nuGetNext(nuLANG*lang,nuTokenbag*tokens,int key,int ni,int maxdepth,int flags)
{
 nuLongDWord bestvaln=0;
 if(ni<tokens->nTokens)
  {
   nuByte*attrn=tokens->Tokens[ni]._attr;
   if(attrn)
    { 
     nuByte*nuBG=lang->BG.bin;
     nuWord*nuIBG=lang->BG.idx;
     nuByte*seqn=nuBG+nuIBG[key];
     int    hmn=(nuIBG[(key+1)]-nuIBG[key])/2,kn;
     for(kn=0;kn<attrn[0];kn++)
      {                 
       int         j,keyn=attrn[1+kn*2]+1,mono=1;
       const char *szTestedPOS=lang->POS+lang->POS[keyn];
       nuLongDWord valn=0,keyvaln=NUPOSTAG_TOPPERC,seqnval=0;
       if(flags&nu_usemonograms)
        mono=nuBG[keyn];
       if(attrn[0]>1)
        keyvaln=attrn[1+kn*2+1];
       for(j=0;j<hmn;j++)
        if(seqn[j*2]==keyn)
         {
          seqnval=seqn[j*2+1];
          break;
         }
       valn=keyvaln*mono;             
       if(seqnval)  
        valn*=seqnval;           
       else 
        valn/=5;           
       if(maxdepth&&valn)
        {
         nuLongDWord nval=nuGetNext(lang,tokens,keyn,ni+1,maxdepth-1,flags);
         if(nval)
          valn=NUPOSTAG_PROPAGATEPROB(valn,nval);
        }
       if(valn>bestvaln)  
        bestvaln=valn;
      }           
    } 
  } 
 return bestvaln; 
}

#if defined(NUPOSTAG_PETSCII)
void petscii2ansi(const nuByte*src,nuWord len,nuByte*dst)
{
 while(len--)
  {
   nuByte ch=*src++;
   if((ch>=193)&&(ch<=218))
    ch=(ch-193)+65;
   else
   if((ch>=65)&&(ch<=90))
    ch=(ch-65)+97;    
   *dst++=ch;
  }
 *dst=0;  
}
#endif

int nuPosTag(
#if defined(NUPOSTAG_MULTILANG)
nuLANG*lang,
#endif
const char*text,nuTokenbag*tokens,unsigned int flags
#if defined(NUPOSTAG_USEINTERNALSTATS)
,nuStats*stats
#endif
)
{
#if !defined(NUPOSTAG_MULTILANG)
 nuLANG*lang=&nuEN;
#endif 
 nuByte*nuBG=lang->BG.bin;
 nuWord*nuIBG=lang->BG.idx;
 int    i,know=0,fnd=0,pposid=-1,fdepth=0;
 if(flags&nu_doparse) nuParse(lang,text,tokens,flags);
 for(i=0;i<tokens->nTokens;i++)
  {
   int        cut=3,unk=0;
   nuByte    *attr=NULL;
   const char*word=text+tokens->Tokens[i].dwPos;
   nuWord     wLen=tokens->Tokens[i].wLen;
   #if defined(NUPOSTAG_PETSCII)
   char       keyPET[MAXLEXLEN];
   petscii2ansi(word,wLen,keyPET);      
   word=keyPET;
   #endif
   if(wLen<lang->mLEX)
    {
     attr=nuFindToken(lang,word,0,wLen);     
     if(nuIsUpper((nuByte)word[0]))
      {
       nuByte*attrL=NULL;
       char stlower[MAXLEXLEN];
       char*lower=stlower;
       nuMemCpy(lower,word,wLen);lower[wLen]=0;
       nuStrLwr(lower);
       attrL=nuFindToken(lang,lower,0,wLen);       
       if(attrL)
        attr=attrL; 
      } 
    }  
   while((attr==NULL)&&(cut>=0))
    {
     nuByte pat[MAXPATLEN];     
     if(nuLM2patex(word,wLen,pat,cut))
      {attr=nuFindUToken(lang,pat);unk=NUUNKWORD;}
     cut--; 
    } 
   tokens->Tokens[i]._attr=attr; 
   tokens->Tokens[i]._info=unk;
  } 
 pposid=0;
 for(i=0;i<tokens->nTokens;i++)
  if(tokens->Tokens[i]._attr)
   {
    nuByte    *attr=tokens->Tokens[i]._attr;
    int        bSel=attr[1]+1,acnt=attr[0];
    const char*szSel=lang->POS+lang->POS[bSel];
    if(flags&nu_fasterpostag)
     ;
    else
    if(attr[0])
     {      
      int         k,j,bestsel=bSel;
      nuLongDWord bestval=0;
      nuByte     *seq=nuBG+nuIBG[pposid];
      int         hm=(nuIBG[pposid+1]-nuIBG[pposid])/2;
      bSel=attr[1]+1;
      if(tokens->Tokens[i]._info&NUUNKWORD)
       {        
        for(j=0;j<hm;j++)
         {
          const char *szBigramPOS=lang->POS+lang->POS[seq[j*2]];
          int         mono=1,seqkey=seq[j*2];
          nuLongDWord keyval=0,seqval=seq[j*2+1];
          nuLongDWord val=0;
          if(flags&nu_usemonograms)
           mono=nuBG[seqkey];
          for(k=0;k<attr[0];k++)
           if(seqkey==attr[1+k*2]+1)
            {
             if(attr[0]>1)
              keyval=attr[1+k*2+1];
             else 
              keyval=NUPOSTAG_TOPPERC;
             acnt--; 
             break;
            }
          val=seqval*mono;  
          if(keyval)  
           val*=keyval;
          else 
           val/=5;          
          if(val)
           { 
            nuLongDWord nval=nuGetNext(lang,tokens,seqkey,i+1,fdepth,flags);
            if(nval)
             val=NUPOSTAG_PROPAGATEPROB(val,nval);
           }            
          if(val>bestval)
           {
            bestval=val;
            bestsel=seqkey;
           }   
         }
       }
      if(acnt==0)
       ;
      else
       for(k=0;k<attr[0];k++)
        {        
         int         key=attr[1+k*2]+1,seqval=0,keyval=NUPOSTAG_TOPPERC,mono=1;
         nuLongDWord val;
         const char*szTestedPOS=lang->POS+lang->POS[key];
         if(flags&nu_usemonograms)
          mono=nuBG[key];
         if(attr[0]>1)
          keyval=attr[1+k*2+1];
         for(j=0;j<hm;j++)
          {
           const char*szBigramPOS=lang->POS+lang->POS[seq[j*2]];
           if(seq[j*2]==key)
            {
             seqval=seq[j*2+1];
             break;
            } 
          }  
         val=keyval*mono; 
         if(seqval)
          val*=seqval;
         else 
          val/=5;
         if(val)
          { 
           nuLongDWord nval=nuGetNext(lang,tokens,key,i+1,fdepth,flags);
           if(nval)
            val=NUPOSTAG_PROPAGATEPROB(val,nval);
          }  
         if(val>bestval)
          {
           bestval=val;
           bestsel=key;
          } 
        }   
      if(bSel!=bestsel)
       bSel=bestsel; 
     }  
    if(bSel!=nuTAGUNK)
     {   
      bSel=bSel-1;  
      szSel=nuTagSZ(bSel);         
     }
    else  
     szSel="UNK";
#if defined(NUPOSTAG_USEINTERNALSTATS)     
    if((flags&nu_checkquality)&&stats) 
     {            
      #if defined(NUPOSTAG_USEBIN) 
      if(tokens->Tokens[i].bPos==bSel)
      #else
      if(tokens->Tokens[i].szPos==szSel)
      #endif 
       stats->good++;
      else
       {
        stats->bad++; 
        tokens->Tokens[i]._info|=NUWRONGTAG;
        if(tokens->Tokens[i]._info&NUUNKWORD) 
         stats->unkbad++; 
        else
         know++; 
        if(stats->missed)
         stats->missed[tokens->Tokens[i].bPos]++;        
         //stats->missed[nuTagId(lang,tokens->Tokens[i].szPos)]++;        
        if(stats->wrong)
         stats->wrong[bSel]++; 
       } 
     }  
#endif     
    #if defined(NUPOSTAG_USEBIN)  
    tokens->Tokens[i].bPos=bSel; 
    #else
    tokens->Tokens[i].szPos=szSel;
    #endif
    pposid=bSel+1;
    fnd++;
   } 
#if defined(NUPOSTAG_USEINTERNALSTATS)   
  else 
   if((flags&nu_checkquality)&&stats) 
    stats->lost++; 
#endif    
 return fnd; 
}

#else

// ************************************************************
// functions for handling nuTokenbag (dynamic array for tokens)
// - token contains a pos,len reference to given text
// - szPos is a reference to static data (so you don't need to 
//   free it)
// ************************************************************
void nuTokenbag_new(nuTokenbag*tokens);
void nuTokenbag_reset(nuTokenbag*tokens);
void nuTokenbag_delete(nuTokenbag*tokens);
int  nuTokenbag_add(nuTokenbag*tokens,nuToken*tkn);
// ************************************************************

// ************************************************************
// function for postagging (you can also do parsing)
// - tokens MUST be alreay created with a nuTokenbag_new call
//   (for dynamic allocation in case of need) OR anyhow initialized 
//   with your data or with enough space for the task (if you
//   need also parsing)
// - if you're asking for parsing, remember to call
//   nuTokenbag_reset before a next call (or it will append)
// ************************************************************

int nuPosTag(
#if defined(NUPOSTAG_MULTILANG)
nuLANG*lang,
#endif
const char*text,nuTokenbag*tokens,unsigned int flags
#if defined(NUPOSTAG_USEINTERNALSTATS)
,nuStats*stats
#endif
);
// ************************************************************

// ************************************************************
// function that returns byte size of postagger data
// ************************************************************
#if defined(NUPOSTAG_MULTILANG)
nuDWord nuSize(nuLANG*lang);
#else
nuDWord nuSize();
#endif
// ************************************************************

// ************************************************************
// function that gets TAG name from id
// ************************************************************
#if defined(NUPOSTAG_MULTILANG)
const char*nuTagSZ(nuLANG*lang,int id);
#else
const char*nuTagSZ(int id);
#endif
// ************************************************************

#endif

#endif